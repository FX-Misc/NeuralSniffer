<!DOCTYPE html>
<html>
	<head>

		<title>TradingView Charting Library demo</title>

		<!-- Fix for iOS Safari zooming bug -->
		<meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0">

        <script type="text/javascript" src="//code.jquery.com/jquery-2.1.0.min.js"></script>
        <script type="text/javascript" src="../charting_library/charting_library.min-deobfuscated.js"></script>
        <script type="text/javascript" src="datafeedSQTradingViewChart1.js"></script>

		

		<script type="text/javascript">

            gTradingViewChartWidget = null;
            gBacktestIsReady = false;

			TradingView.onready(function()
			{
			    //https://github.com/tradingview/charting_library/wiki/Widget-Constructor
				var widget = new TradingView.widget({
					//fullscreen: true,
				    symbol: 'SQTickerOrStrategySymbol',
					//symbol: 'AA',
				    interval: 'D',
				    //interval: 'D,870D',
					container_id: "tv_chart_container",
					//	BEWARE: no trailing slash is expected in feed URL
					datafeed: new Datafeeds.UDFCompatibleDatafeed("http://demo_feed.tradingview.com"),
					library_path: "../charting_library/",
					locale: "en",
					//	Regression Trend-related functionality is not implemented yet, so it's hidden for a while
					drawings_access: { type: 'black', tools: [ { name: "Regression Trend" } ] },
					
					charts_storage_url: 'http://saveload.tradingview.com',
					client_id: 'tradingview.com',
					user_id: 'public_user_id'


                    , width: "90%"        //Remark: if you want the chart to occupy all the available space, do not use '100%' in those field. Use fullscreen parameter instead (see below). It's because of issues with DOM nodes resizing in different browsers.
                    , height: 600
				    //https://github.com/tradingview/charting_library/wiki/Featuresets
				    //,enabled_features: ["trading_options"]    
				    //, enabled_features: ["charting_library_debug_mode", "narrow_chart_enabled", "move_logo_to_main_pane"] //narrow_chart_enabled and move_logo_to_main_pane doesn't do anything to me
                    , enabled_features: ["charting_library_debug_mode"]
				    //, disabled_features: ["use_localstorage_for_settings", "volume_force_overlay", "left_toolbar", "control_bar", "timeframes_toolbar", "border_around_the_chart", "header_widget"]
                    , disabled_features: ["border_around_the_chart"]
                    , debug: true   // Setting this property to true makes the chart to write detailed API logs to console. Feature charting_library_debug_mode is a synonym for this field usage.
					, time_frames: [
                        //{ text: "All", resolution: "6M" }, crash: first character should be a Number
                        { text: "600m", resolution: "D" },   // 50 years : Put an insanely high value here. But later in the calculateHistoryDepth() we will decrease it to backtested range
                        { text: "12y", resolution: "D" },   // this can be equivalent to ALL. Just calculate before how many years, or month.
                        { text: "6000d", resolution: "D" },   // this can be equivalent to ALL. Just calculate before how many years, or month. DO NOT WORK. Max days: 350
                        
						{ text: "50y", resolution: "6M" },
						{ text: "3y", resolution: "W" },
						{ text: "8m", resolution: "D" },
						{ text: "2m", resolution: "D" }
					]

				    , overrides: {
				        "mainSeriesProperties.style": 3,    // area style
				        "symbolWatermarkProperties.color": "#644",
				        "moving average exponential.length": 13     // but doesn't work. It will be changed later anyway.
				    },


				});

			    //// it is set in the variables, but it is not updated in the chart.
			    //widget.options.hideSideToolbar = true;    //obsolete(1.1 - 1.5) (use disabled_features instead)
				//widget.options.time_frames[0].text = "ALL";

			    //https://github.com/tradingview/charting_library/wiki/Widget-Methods
				//widget.onContextMenu(function (unixtime, price) {
				//    return [{
				//        position: "top",
				//        text: "First top menu item, time: " + unixtime + ", price: " + price,
				//        click: function () { alert("First clicked."); }
				//    }, {
				//        position: "top",
				//        text: "Second top menu item 2",
				//        click: function () { alert("Second clicked."); }
				//    }, {
				//        position: "bottom",
				//        text: "Bottom menu item",
				//        click: function () { alert("Third clicked."); }
				//    }];
				//});


				widget.onChartReady(function () {

				    gTradingViewChartWidget = widget;

				    if (gBacktestIsReady) {
				        //gTradingViewChartWidget.postMessage.post(gTradingViewChartWidget._messageTarget(), "loadRangeAgy", {
				        //    res: "D",
				        //    val: "61m"  // the updated range after backtest is ready
				        //})

				        // this is better than the gTradingViewChartWidget.postMessage.post(gTradingViewChartWidget._messageTarget(), "loadRangeAgy", because the 'loading data' bug doesn't effect it, and because I can use the minified TV library
				        // however, Chart Cache-s the getBars() data for every Time-Frame button, so it will not ask later for the new data. So, Removing(), Creating() chart is still necessary
				        // note how to locate the <DIV> element: dateRangeDiv.OuterHTML = "<div class="chart-controls-bar-buttons date-range-wrapper"><a>61m</a><a>6y</a><a>6000d</a><a>50y</a><a>3y</a><a>8m</a><a>2m</a></div>"
				        var z1 = document.getElementById("tv_chart_container");
				        //var dateRangeDiv = z1.children[0].contentDocument.childNodes['1'].children['1'].children['library-container'].children['2'].children['chart-area'].children['0'].children['1'].children['1'];
				        var dateRangeDiv = z1.children[0].contentDocument.childNodes['1'].children['1'].children['library-container'].children['2'].children['chart-area'].children['0'].children['0'].children['1'];
				        dateRangeDiv.children['0'].click();
				        dateRangeDiv.children['0'].innerHTML = "All";   // it takes effect, but if I click it Afterwards, than it will change back to original; so modify the Text After the Click
				    }

				    //widget.options.time_frames[0].text = "ALL";     // doesn't work; doesn't change the Text

				    //widget.createStudy('Moving Average Exponential', false, false, [26]);       //inputs: (since version 1.2) an array of study inputs.
				    //gTradingViewChartWidget.postMessage.post(gTradingViewChartWidget._messageTarget(), "createStudy", {
				    //    name: 'Moving Average Exponential',
				    //    lock: false,
				    //    forceOverlay: false
				    //})

					var position = widget.createPositionLine()
						.onReverse(function(text) {
						})
						.onClose(function(text) {
						})
						.setText("PROFIT OF POSITION: $??.? (?.??%)")
						.setQuantity("#X.XX")    // that is the Position in the positionLine (number of shares)
                        .setLineLength(3); //  how far is the mark from the right side
                    position.setPrice(position.getPrice() - 2.0);     // how far is that from the lastBar price.

					//var order = widget.createOrderLine()
					//	.onCancel(function(text) {
					//	})
					//	.setText("STOP: 73.5 (5,64%)")
                    //    .setLineLength(3)
					//	.setQuantity("2");
                    //order.setPrice(order.getPrice() - 2.5);

					//widget.createExecutionShape()     // this crashes
					//	.setText("@1,320.75 Limit Buy 1")
					//	.setTextColor("rgba(255,0,0,0.5)")
					//	.setArrowSpacing(25)
					//	.setArrowHeight(25)
					//	.setArrowColor("#F00")
					//	//.setTime(new Date().valueOf() - 3*24*60*60*1000)    // get 3 days earlier than today
                    //    .setTime(new Date(2014,12,1,0,0,0,0).valueOf())    // get 3 days earlier than today
					//	.setPrice(15.5);
				});
			})

		</script>

	</head>

	<body style="margin:0px;">

        <button id="startButton">Click here to Refresh chart (after backtest is ready) to make getBars() be called for new data and to update the TimeFrames toolbar </button><br><br>
		<div id="tv_chart_container"></div>

        <script>
            //function getByClass(className, parent) {
            //    parent || (parent = document);
            //    var descendants = parent.getElementsByTagName('*'), i = -1, e, result = [];
            //    while (e = descendants[++i]) {
            //        ((' ' + (e['class'] || e.className) + ' ').indexOf(' ' + className + ' ') > -1) && result.push(e);
            //    }
            //    return result;
            //}

            document.getElementById("startButton").onclick = function () {

                gBacktestIsReady = true;
                
                //var z2 = z1.getElementsByTagName("tradingview_63a16");

                //var x = document.getElementsByClassName("chart-controls-bar-buttons date-range-wrapper");
                //var z = getByClass("chart-controls-bar-buttons date-range-wrapper", document);
                ////var y = null;
                ////var elems = document.getElementsByTagName('*');
                ////for (i in elems) {
                ////    if (elems[i].getAttribute('class') == "chart-controls-bar-buttons date-range-wrapper" || elems[i].getAttribute('className') == "chart-controls-bar-buttons date-range-wrapper") {
                ////        y = elems[i];
                ////        //elems[i].innerHTML = content;
                ////    }
                ////}


                ////gConnorStrategy.pvToPlot = pvToPlot;    // after that, we may widget.remove the Chart, and create a completely new Chart every time, we re-run the backtest

                // 1. Refresh TVChart (make it call the getBars()), version 1: //After #178 chart supports loading chart without iframe reloading.
                ////// This will redraw only the innear area of the chart, not the Toolbars. Quick, but sometimes it is not enough. When you want to change the TimeFrames for example.
                ////gTradingViewChartWidget.save(function (json) {
                ////    gTradingViewChartWidget.load(json);
                ////});
                // Problem: id doesn't refresh the TimeFrames toolbar

                /*
                // 2. setSymbol()
                //gTradingViewChartWidget.setSymbol("SQTickerOrStrategySymbol", "D,870D"); //it crashes, and without 870D it didn't crash, but didn't work either.
                //gTradingViewChartWidget.setSymbol("SQTickerOrStrategySymbol", "870D"); //it doesn't crash, but 1 bar = 870Days
                //gTradingViewChartWidget.setSymbol("SQTickerOrStrategySymbol", "20D"); //it doesn't crash, but 1 bar = 2Days
                //gTradingViewChartWidget.setSymbol("SQTickerOrStrategySymbol", "D"); //it doesn't crash, but 1 bar = 1 day
                //gTradingViewChartWidget.setSymbol("SQTickerOrStrategySymbol", "30"); //it doesn't crash, but 1 bar = 30 min
                gTradingViewChartWidget.setSymbol("SQTickerOrStrategySymbol", "2D"); //it doesn't crash, but 1 bar = 1 day
                //Conclusion: setSymbol is only for changing the Frequency of the bar (daily, weekly, 30min), but not for saying how many bars do I want on the screen
                // checked for TradingView 1.2
                */

                // 3.
                //gTradingViewChartWidget.getVisibleRange(function (range) {
                //    //    alert(range.from + "/" +  range.to);
                //});
                //var now = new Date();
                //var utcNowUnixSeconds = Math.round(now.getTime() / 1000);
                //var startTimeUtcUnixSeconds = utcNowUnixSeconds - 60 * 60 * 24 * 20;     // take away 250 days for startDate
                //// left visible bar will be found with lower_bound algo and right one-- with upper_bound
                ////var newRange = { from: 1325100036, to: 1436556096 };     //unixTimeUTC
                //var newRange = { from: utcNowUnixSeconds, to: startTimeUtcUnixSeconds };     //unixTimeUTC
                //gTradingViewChartWidget.setVisibleRange(newRange, function onReadyCallback() {
                //    // alert('setVisibleRange() callback onReady');
                //});
                // However, there is no Error message in the Javascript Console, but it didn't set the Visible range.
                // Even if it sets it there is a message in the code: console.warn("This method doesn't support moving to not loaded history bars now");
                // so, forget it. It doesn't work. I think the guy didn't test it, just wrote the code.
                // checked for TradingView 1.2

                // 4.
                //***!!!! This can be used only with the updated Chart, but the time-frame bar will not update visually, but re-creation will not Blink, as it will not create a short-term version of the chart for 1second
                //***!!! cannot be used.... because once it goes to the 'loading data' bug, after, it will never refresh the chart. Because it will not ask getBars() ever. So, we have to re-create the chart.
                //gTradingViewChartWidget.postMessage.post(gTradingViewChartWidget._messageTarget(), "loadRangeAgy", {  // don't post this message until the chart is ready() again. Post it later in the onReady() callback.
                //    res: "D",
                //    val: "121m"
                //})
                //// this is similar than postMessage(), but a bit better than the gTradingViewChartWidget.postMessage.post(gTradingViewChartWidget._messageTarget(), "loadRangeAgy", because the 'loading data' bug doesn't effect it, and because I can use the minified TV library
                //// however, Chart Cache-s the getBars() data for every Time-Frame button, so it will not ask later for the new data. So, Removing(), Creating() chart is still necessary
                //var z1 = document.getElementById("tv_chart_container");
                //var dateRangeDiv = z1.children[0].contentDocument.childNodes['1'].children['1'].children['library-container'].children['2'].children['chart-area'].children['0'].children['1'].children['1'];
                //dateRangeDiv.children['0'].click();
                //dateRangeDiv.children['0'].innerHTML = "All";   // it takes effect, but if I click it Afterwards, than it will change back to original; so modify the Text After the Click

                //// 5. Refresh TVChart (make it call the getBars()), version 3: parent.removeChild(iFrame); and append again, // good for resize() iframe, but doesn't rebuild the Toolbars
                ////redraw chart, see https://github.com/tradingview/charting_library/issues/155 ,but changing options.width doesn't work for me; for that you have to do it on the iFrame
                //var container = document.getElementById('tv_chart_container');
                //var iframe = container.querySelector('iframe');
                ////iframe.height = "300px";
                ////iframe.width = "50%";
                ////gTradingViewChartWidget.options.time_frames[0].text = "6y";
                ////gTradingViewChartWidget.options.time_frames[1].text = "61m";    // I can calculate dynamically, but not important now.
                //container.removeChild(iframe);
                //container.appendChild(iframe);
                // Problem: id doesn't refresh the TimeFrames toolbar

                
                // 6. Refresh TVChart (make it call the getBars()), version 2: idea stolen from widget.setLangue() inner implementation. It will redraw the Toolbars too, not only the inner area. But it can change TimeFrames Toolbar
                ////***!!!!This is the best if we have to work with the official Chart, but postMessage works without this
                // this part will set up the Timeframes bar properly, but later is chart.onChartReady() you have to click the first button by "dateRangeDiv.children['0'].click();"
                gDatafeedObject = null; // purge it, so setInterval() will not update the Chart every 10 seconds
                gTradingViewChartWidget.remove();       // this is the way to the widget.options to be effective
                //gTradingViewChartWidget.options.time_frames[0].text = "All";    // cannot be "All"; it crashes.
                gTradingViewChartWidget.options.time_frames[0].text = "61m";    // I can calculate dynamically, but not important now.
                gTradingViewChartWidget.options.time_frames[1].text = "6y";
                //gTradingViewChartWidget.options.width = "50%";        // works too in Remove(), Create()
                gTradingViewChartWidget.create()
           
            }

        </script>

	</body>

</html>