

***************************************************************************************************************
********************* 2015-05-31, SQL speed improvement after merging Robert's new SQL queries

The absolute limits for SQL queries (measured at the SQL server)
- for Indices (not require Adjustment): 0msec,
- for stock requires Adjustement: 235msec

DECLARE @t0 DATETIME2 = SYSUTCDATETIME();

DECLARE @ID0 INT = (SELECT ID FROM Stock WHERE Ticker='SPY');
DECLARE @Ticker0 VARCHAR(20) = (SELECT Ticker FROM Stock WHERE ID = @ID0);
(
SELECT Ticker,[Date],[Close]
FROM (SELECT /*TopN*/ [Date],   OpenPrice * adj.f AS [Open] , HighPrice * adj.f AS High
    , LowPrice  * adj.f AS Low, ClosePrice* adj.f AS [Close], Volume, StockID, @Ticker0 AS Ticker
FROM StockQuote
CROSS APPLY dbo.GetAdjustmentFactorAt2(StockID, [Date]) AS adj
WHERE StockID = @ID0 /*AND_DateRange*/ /*TopN_orderby*/) AS t
) ORDER BY [Date]

PRINT 'elapsed ^GSPC ms: ' + CONVERT(VARCHAR(MAX),DATEDIFF(ms, @t0, SYSUTCDATETIME()));
(5604 row(s) affected)
elapsed ^GSPC ms: 235
//so that is the absolute minimum possible. It is that much because of the AdjustmentFactor2(), but we need that
******************

DECLARE @t0 DATETIME2 = SYSUTCDATETIME();
DECLARE @ID0 INT = (SELECT ID FROM StockIndex WHERE Ticker='^GSPC');
DECLARE @Ticker0 VARCHAR(20) = (SELECT Ticker FROM StockIndex WHERE ID = @ID0);
(
SELECT Ticker,[Date],[Close]
FROM (SELECT /*TopN*/ [Date], OpenPrice AS [Open], HighPrice AS High 
        , LowPrice  AS Low, ClosePrice AS [Close], Volume, StockIndexID AS StockID, @Ticker0 AS Ticker
FROM StockIndexQuote WHERE StockIndexID = @ID0 /*AND_DateRange*/ /*TopN_orderby*/) AS t
) ORDER BY [Date]
PRINT 'elapsed ^GSPC ms: ' + CONVERT(VARCHAR(MAX),DATEDIFF(ms, @t0, SYSUTCDATETIME()));
(16437 row(s) affected)
elapsed ^GSPC ms: 0



A. SPY lehozasa, elejetol a vegeig. Locale IIS, Remote Azure SQL server:
Old code:
DebugMessage:  SQL query time: 352ms, RT query time: 211ms, All query time: 354ms, TotalC#Response: 401ms
DebugMessage:  SQL query time: 341ms, RT query time: 211ms, All query time: 374ms, TotalC#Response: 408ms
DebugMessage:  SQL query time: 638ms, RT query time: 207ms, All query time: 641ms, TotalC#Response: 696ms
DebugMessage:  SQL query time: 324ms, RT query time: 187ms, All query time: 329ms, TotalC#Response: 413ms
DebugMessage:  SQL query time: 682ms, RT query time: 215ms, All query time: 683ms, TotalC#Response: 732ms
DebugMessage:  SQL query time: 516ms, RT query time: 359ms, All query time: 520ms, TotalC#Response: 573ms 
DebugMessage:  SQL query time: 367ms, RT query time: 194ms, All query time: 370ms, TotalC#Response: 421ms 
DebugMessage:  SQL query time: 329ms, RT query time: 217ms, All query time: 333ms, TotalC#Response: 400ms
New code:
DebugMessage:  SQL query time: 305ms, RT query time: 210ms, All query time: 310ms, TotalC#Response: 396ms 
DebugMessage:  SQL query time: 518ms, RT query time: 203ms, All query time: 523ms, TotalC#Response: 582ms
DebugMessage:  SQL query time: 280ms, RT query time: 203ms, All query time: 283ms, TotalC#Response: 360ms 
DebugMessage:  SQL query time: 407ms, RT query time: 226ms, All query time: 408ms, TotalC#Response: 445ms 
DebugMessage:  SQL query time: 489ms, RT query time: 286ms, All query time: 492ms, TotalC#Response: 550ms
DebugMessage:  SQL query time: 405ms, RT query time: 226ms, All query time: 406ms, TotalC#Response: 455ms
DebugMessage:  SQL query time: 284ms, RT query time: 198ms, All query time: 286ms, TotalC#Response: 343ms
DebugMessage:  SQL query time: 261ms, RT query time: 199ms, All query time: 266ms, TotalC#Response: 351ms 


B. SPY lehozasa, elejetol a vegeig. Remote Azure IIS, Remote Azure SQL server:
Old code:
DebugMessage: SQL query time: 270ms, RT query time: 195ms, All query time: 272ms, TotalC#Response: 433ms
DebugMessage: SQL query time: 310ms, RT query time: 206ms, All query time: 313ms, TotalC#Response: 465ms
DebugMessage: SQL query time: 296ms, RT query time: 204ms, All query time: 298ms, TotalC#Response: 419ms 
DebugMessage: SQL query time: 1039ms, RT query time: 201ms, All query time: 1041ms, TotalC#Response: 1243ms
DebugMessage: SQL query time: 310ms, RT query time: 284ms, All query time: 311ms, TotalC#Response: 432ms 
DebugMessage: SQL query time: 278ms, RT query time: 127ms, All query time: 280ms, TotalC#Response: 441ms 
DebugMessage: SQL query time: 2593ms, RT query time: 186ms, All query time: 2597ms, TotalC#Response: 2708ms
DebugMessage: SQL query time: 269ms, RT query time: 192ms, All query time: 271ms, TotalC#Response: 407ms 
New code:
DebugMessage: SQL query time: 227ms, RT query time: 277ms, All query time: 280ms, TotalC#Response: 430ms 
DebugMessage: SQL query time: 239ms, RT query time: 213ms, All query time: 241ms, TotalC#Response: 363ms
DebugMessage: SQL query time: 324ms, RT query time: 212ms, All query time: 326ms, TotalC#Response: 475ms 
DebugMessage: SQL query time: 237ms, RT query time: 207ms, All query time: 240ms, TotalC#Response: 401ms
DebugMessage: SQL query time: 233ms, RT query time: 218ms, All query time: 235ms, TotalC#Response: 366ms
DebugMessage: SQL query time: 245ms, RT query time: 206ms, All query time: 246ms, TotalC#Response: 372ms
DebugMessage: SQL query time: 238ms, RT query time: 209ms, All query time: 240ms, TotalC#Response: 386ms
DebugMessage: SQL query time: 312ms, RT query time: 196ms, All query time: 313ms, TotalC#Response: 438ms 

C. ^GSPC Index lehozasa, elejetol a vegeig. Remote Azure IIS, Remote Azure SQL server:
DebugMessage: SQL query time: 045ms, RT query time: 106ms, All query time: 110ms, TotalC#Response: 399ms
DebugMessage: SQL query time: 033ms, RT query time: 126ms, All query time: 130ms, TotalC#Response: 438ms 
DebugMessage: SQL query time: 041ms, RT query time: 345ms, All query time: 349ms, TotalC#Response: 621ms
DebugMessage: SQL query time: 044ms, RT query time: 104ms, All query time: 108ms, TotalC#Response: 382ms
>that is good, because that means the 44msec is about the communication time over the same Data center.



**************** Here is my brief result after scrutinizing Significance Test values:
- In general: There are more (3+) significant values in the TotMM table, and only 1 in TotM table. So play the TotMM too. So play TotMM too, not only TotM.

- Before Significance test, we suggested:
    $scope.dailyMarketDirectionMaskWinterTotM = "UUUD.UUU";//Mask: D0.UU, Up: Market Up, D: Down, 0:Cash (B is not good because Bullish, Bearish): other option Comma separation, but not necessary here
    $scope.dailyMarketDirectionMaskWinterTotMM = "DDUU.UU00UU";
    $scope.dailyMarketDirectionMaskSummerTotM = "DDDDUUD.UDD";
    $scope.dailyMarketDirectionMaskSummerTotMM = "DDUU.UU00DDD";
// before significance test: SPY: CAGR:  25.30%  Annualized StDev:  16.50%  Sharpe:  1.53; (15+19)/2=17 days per month

- After Significance test, we suggest:
    $scope.dailyMarketDirectionMaskWinterTotM = "UUUD.UUU";//Mask: D0.UU, Up: Market Up, D: Down, 0:Cash (B is not good because Bullish, Bearish): other option Comma separation, but not necessary here
    $scope.dailyMarketDirectionMaskWinterTotMM = "DDUU.UU00UU"; // winter didn't change after Significance test.
    $scope.dailyMarketDirectionMaskSummerTotM = "DD00U00.U";
    $scope.dailyMarketDirectionMaskSummerTotMM = "D0UU.0U";
 // after significance test: SPY: CAGR:  23.27%  Annualized StDev:  14.23%  Sharpe:  1.64; (15+8)/2=11.5 days per month //sharpe increased! more reliable 
 I like this better
 VXX: CAGR:  77.78%  Annualized StDev:  44.02%  Sharpe:  1.77  
 VXX.SQ: CAGR:  55.06%  Annualized StDev:  41.26%  Sharpe:  1.33    
 TQQQ: CAGR:  59.14%  Annualized StDev:  35.88%  Sharpe:  1.65  
 >This is the maximum that a combination of day-of-the-month + Helloween effect can give. But that is quite good, with averae 11.5 days invested per month.

 ****** What to play after Significance test ? steps of the data crunching:

*: means significant with 95% confidence level
^: 90% confidence level

1. Suggestion to play: after significance test SPY (looking at t-value(0) around 1.6 or more)
- winter: U*UUD.U*U*U*/ DDUU.U^U*00U*U*
- summer: D*D00U00.U*/  D*0U*U*.0U*
- united: .U*/D*DU*U.UU* 			is suggested. Also like extra 2 days at TotM: .U*UU/D*DU*U.UU*

2. Suggestion to play: after significance test VXX.SQ (looking at t-value(0) around 1.6 or more)
- winter: D.UU*U*/ UD.0U*UU*U*U*U
- summer: U*00./.0U*
- united: U*0D.UUU/ UD.DU*UUUU*			// that is why Uber VXX plays D.UUU, but note the SPY is different: only plays .U


********************* 2015-04-10: Hypothesis testing discussion, 


- vagy vegyuk a logaritmusukat, az jobban normalis eloszlasu.
- totalMean of the 25 years: SPY 0.03%;  VXX: -0.28

H0: Az X valószínuségi változó várható értéke megegyezik m-mel. (nulla kicsi kornyezeteben van)
vagy nulla vagy pozitiv....
H1: Az X valószínuségi változó várható értéke kisebb m-mel.: 
valtozo <

H0: null hypothesis: assumption: population Mean = 0;
H1: using that assumption0,  What is the P probability that the observed sample aMean result is due to chance .
If that probability is too Low, then reject the H0 hypothesis, and say that the populationMean significantly > 0.
(If populationMean signifinactly < 0, that is even less likely.)
Igazabol H1-re nincs is szukseg.

H0 and H1 are not complementers.

http://www.ats.ucla.edu/stat/mult_pkg/faq/general/tail_tests.htm
For example, we may wish to compare the mean of a sample to a given value x using a t-test.  Our null hypothesis is that the mean is equal to x. A two-tailed test will test both if the mean is significantly greater than x and if the mean significantly less than x. The mean is considered significantly different from x if the test statistic is in the top 2.5% or bottom 2.5% of its probability distribution, resulting in a p-value less than 0.05.     

What is a one-tailed test?
Next, let's discuss the meaning of a one-tailed test.  If you are using a significance level of .05, a one-tailed test allots all of your alpha to testing the statistical significance in the one direction of interest.  This means that .05 is in one tail of the distribution of your test statistic.

When using a one-tailed test, you are testing for the possibility of the relationship in one direction and completely disregarding the possibility of a relationship in the other direction.  Let's return to our example comparing the mean of a sample to a given value x using a t-test.  Our null hypothesis is that the mean is equal to x. A one-tailed test will test either if the mean is significantly greater than x or if the mean is significantly less than x, but not both.

In practice, you should use a one-tailed test only when you have good reason to expect that the difference will be in a particular direction. A two-tailed test is more conservative than a one-tailed test because a two-tailed test takes a more extreme test statistic to reject the null hypothesis.

So, H0, and H1 not complementers.

http://sphweb.bumc.bu.edu/otlt/MPH-Modules/BS/BS704_HypothesisTest-Means-Proportions/BS704_HypothesisTest-Means-Proportions3.html
H1: µ > µ 0 , where µ0 is the comparator or null value (e.g., µ0 =191 in our example about weight in men in 2006) and an increase is hypothesized - this type of test is called an upper-tailed test;


*************************  Balazs skype talk
-  Balazs ezt hasznalta, mert Excel ezt tudja:
http://hu.wikipedia.org/wiki/K%C3%A9tmint%C3%A1s_t-pr%C3%B3ba
itt is irja. normalis kene, de ha 30+ folotti mintaszam, akkor centralist kozeliti, es Balazs mondja, hogy akkor megis hasznalhato

H0: E(*) == 0.03, ez lenne nekem a rossz.
H1: E(SPY napi %change day T+1) > 0.03, ez nekem a jo.

egyoldali, mert csak az egyik oldalt nezem.

H1: E(SPY napi %change day T+1) > 0.03 + Epsilon (5%valoszinu), ez nekem a jo.
H0: E(*) <= 0.03, ez lenne nekem a rossz.

mi van ha ez az igazi... E(*) = 0.03000000000000000000001

H1: E(SPY napi %change day T+1) > 0.03, ez nekem a jo.
H0: E(*) <= 0.03, ez lenne nekem a rossz.

E^ becslesem;
E^... kornyeken intervallum... -+ Epsilon (5%).... 0.03

'= (p)' 

"=1%"
"=5%"

step: calculate t = // az, hogy az az atlag*gyokN hany std dev-re van.
step 2: calculate p? 0.051 = terulet
- ha p < 0.05, akkor H1-et fogadom el, (mert az nekem jo)

ha ketoldali van, akkor a megkapott p-t dublazom.



***************************************************************************************************************
********************* 2015-03-31
"Hali Robi, 
Visszavonom, amit irtam. False alarm.
Azure-ra felteve, teljesen masokat kapok."

SPY lehozasa, elejetol a vegeig. Remote Azure IIS, Remote Azure SQL server:
Old code:
DebugMessage: SQL query time: 629ms
DebugMessage: SQL query time: 609ms 
DebugMessage: SQL query time: 607ms
DebugMessage: SQL query time: 606ms
DebugMessage: SQL query time: 584ms
DebugMessage: SQL query time: 654ms
DebugMessage: SQL query time: 628ms
DebugMessage: SQL query time: 580ms

New code:
DebugMessage: SQL query time: 304ms 
DebugMessage: SQL query time: 313ms 
DebugMessage: SQL query time: 287ms
DebugMessage: SQL query time: 289ms 
DebugMessage: SQL query time: 279ms
DebugMessage: SQL query time: 286ms
DebugMessage: SQL query time: 279ms
DebugMessage: SQL query time: 275ms
DebugMessage: SQL query time: 288ms
DebugMessage: SQL query time: 286ms

Brutalisan jobb az uj kod.
Akkor ugy nez ki ez a GetAdjustmentFactorAt2() megis csak bejott.
Szoval semmit nem kell csinalni.

Kosz,
Gy.



-----Original Message-----
From: Dr. George Antal [mailto:gyantal@gmail.com] 
Sent: Tuesday, 31, March, 2015 22:38
To: 'Mészáros Róbert'
Subject: RE: Adjusted VXX

Szia Robi,

Hm.
Erdekes modon en ugy merem, hogy szerintem lassabb valamivel:

SPY lehozasa, elejetol a vegeig. LocalHost-on (IIS), to SQL server:
kb.

Stopwatch stopWatch = Stopwatch.StartNew();
stocksSqlReturnTask = Tools.GetHistoricalQuotesAsync()
stocksSqlReturn = await stocksSqlReturnTask;
stopWatch.Stop();

Probak:
1.
Old GetHistoricalQuotes.cs:
DebugMessage:  SQL query time: 835ms
DebugMessage:  SQL query time: 824ms
DebugMessage:  SQL query time: 538ms
DebugMessage:  SQL query time: 570ms
DebugMessage:  SQL query time: 548ms
DebugMessage:  SQL query time: 581ms
DebugMessage:  SQL query time: 577ms
DebugMessage:  SQL query time: 583ms
DebugMessage:  SQL query time: 554ms
Avg: 835+824+538+570+548+581+577+583+554 / 9 = 623msec

2.
New GetHistoricalQuotes.cs:
DebugMessage:  SQL query time: 851ms
DebugMessage:  SQL query time: 833ms
DebugMessage:  SQL query time: 578ms
DebugMessage:  SQL query time: 777ms
DebugMessage:  SQL query time: 852ms
DebugMessage:  SQL query time: 630ms
DebugMessage:  SQL query time: 578ms
DebugMessage:  SQL query time: 750ms
DebugMessage:  SQL query time: 797ms
DebugMessage:  SQL query time: 598ms
Avg: 851+833+578+777+852+630+578+750+797+598 / 10 = 724.4msec

Difference: 101msec



***************************************************************************************************************
*******2015-03-19 **********  Effect of Using only 1 SQL access, instead of 2 SQL accesses (previously Select StockID from Tickers were sent separately)
A. Local development, localhost:
A.1 SPY:
2 SQL query (before):
DebugMessage:  SQL query time: 668ms, RT query time: 231ms, All query time: 671ms, TotalC#Response: 700ms 
DebugMessage:  SQL query time: 655ms, RT query time: 205ms, All query time: 656ms, TotalC#Response: 668ms 
DebugMessage:  SQL query time: 868ms, RT query time: 208ms, All query time: 869ms, TotalC#Response: 874ms 
DebugMessage:  SQL query time: 688ms, RT query time: 190ms, All query time: 691ms, TotalC#Response: 713ms 
DebugMessage:  SQL query time: 658ms, RT query time: 221ms, All query time: 660ms, TotalC#Response: 677ms 
1. SQL query (after):
DebugMessage:  SQL query time: 640ms, RT query time: 201ms, All query time: 640ms, TotalC#Response: 645ms  
DebugMessage:  SQL query time: 661ms, RT query time: 201ms, All query time: 664ms, TotalC#Response: 687ms  
DebugMessage:  SQL query time: 656ms, RT query time: 200ms, All query time: 658ms, TotalC#Response: 682ms  
DebugMessage:  SQL query time: 684ms, RT query time: 200ms, All query time: 685ms, TotalC#Response: 692ms  
DebugMessage:  SQL query time: 723ms, RT query time: 322ms, All query time: 725ms, TotalC#Response: 749ms  
>Success: Saving of 30ms (locally)

A.2 VXX:
2 SQL query:
DebugMessage:  SQL query time: 195ms, RT query time: 147ms, All query time: 196ms, TotalC#Response: 204ms 
DebugMessage:  SQL query time: 194ms, RT query time: 115ms, All query time: 194ms, TotalC#Response: 196ms 
DebugMessage:  SQL query time: 207ms, RT query time: 114ms, All query time: 208ms, TotalC#Response: 216ms 
DebugMessage:  SQL query time: 198ms, RT query time: 114ms, All query time: 198ms, TotalC#Response: 202ms 
DebugMessage:  SQL query time: 192ms, RT query time: 122ms, All query time: 193ms, TotalC#Response: 201ms 
1. SQL query:
DebugMessage:  SQL query time: 160ms, RT query time: 115ms, All query time: 160ms, TotalC#Response: 163ms  
DebugMessage:  SQL query time: 163ms, RT query time: 112ms, All query time: 163ms, TotalC#Response: 167ms  
DebugMessage:  SQL query time: 163ms, RT query time: 129ms, All query time: 163ms, TotalC#Response: 164ms  
DebugMessage:  SQL query time: 169ms, RT query time: 113ms, All query time: 169ms, TotalC#Response: 170ms  
DebugMessage:  SQL query time: 169ms, RT query time: 114ms, All query time: 169ms, TotalC#Response: 170ms  
>Success: Saving of 30ms (locally)
**********************
B. Remote on Azure Server
B.1 SPY:
2 SQL query:
DebugMessage: SQL query time: 632ms, RT query time: 181ms, All query time: 632ms, TotalC#Response: 645ms
DebugMessage: SQL query time: 583ms, RT query time: 170ms, All query time: 584ms, TotalC#Response: 593ms
DebugMessage: SQL query time: 609ms, RT query time: 192ms, All query time: 609ms, TotalC#Response: 622ms
DebugMessage: SQL query time: 600ms, RT query time: 185ms, All query time: 601ms, TotalC#Response: 614ms
DebugMessage: SQL query time: 658ms, RT query time: 168ms, All query time: 658ms, TotalC#Response: 679ms
Avg: 615.4
1. SQL query:
DebugMessage: SQL query time: 620ms, RT query time: 194ms, All query time: 621ms, TotalC#Response: 636ms
DebugMessage: SQL query time: 620ms, RT query time: 293ms, All query time: 620ms, TotalC#Response: 638ms 
DebugMessage: SQL query time: 673ms, RT query time: 177ms, All query time: 674ms, TotalC#Response: 683ms
DebugMessage: SQL query time: 608ms, RT query time: 175ms, All query time: 608ms, TotalC#Response: 618ms
DebugMessage: SQL query time: 634ms, RT query time: 171ms, All query time: 635ms, TotalC#Response: 648ms
Avg: 631 (no real time saving, because inside data center; the access is quite instant)

B.2 VXX:
2 SQL query:
DebugMessage: SQL query time: 157ms, RT query time: 088ms, All query time: 157ms, TotalC#Response: 160ms
DebugMessage: SQL query time: 133ms, RT query time: 090ms, All query time: 133ms, TotalC#Response: 135ms 
DebugMessage: SQL query time: 135ms, RT query time: 100ms, All query time: 135ms, TotalC#Response: 137ms
DebugMessage: SQL query time: 132ms, RT query time: 186ms, All query time: 187ms, TotalC#Response: 190ms
DebugMessage: SQL query time: 131ms, RT query time: 094ms, All query time: 131ms, TotalC#Response: 134m
Avg: 137.6
1. SQL query:
DebugMessage: SQL query time: 139ms, RT query time: 084ms, All query time: 140ms, TotalC#Response: 142ms
DebugMessage: SQL query time: 143ms, RT query time: 090ms, All query time: 143ms, TotalC#Response: 146ms
DebugMessage: SQL query time: 133ms, RT query time: 083ms, All query time: 133ms, TotalC#Response: 136ms 
DebugMessage: SQL query time: 133ms, RT query time: 093ms, All query time: 134ms, TotalC#Response: 136ms
DebugMessage: SQL query time: 151ms, RT query time: 083ms, All query time: 151ms, TotalC#Response: 154ms
Avg: 139.8 (no real time saving, because inside data center; the access is quite instant)
