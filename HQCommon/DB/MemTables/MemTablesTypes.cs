//------------------------------------------------------------------------------
// <auto-generated>
//
//  This file was generated by a tool:
//     src\Tools\MemTablesTypesGenerator\run.cmd
//  which is equivalent to:
//     MemTablesTypesGenerator.exe -dst {pathToThisFile} -customRules {path\}CustomRules.xml
//
//  That .exe is the outcome of the Tools\MemTablesTypesGenerator project, and
//  this .cs file is the product of that .exe. To customize this generated code,
//  edit either CustomRules.xml and/or MemTablesTypesGenerator\SourceCodeTemplate.cs.
//
//  Changes to this file may cause incorrect behavior and will be lost
//  when the code is regenerated.
//
// </auto-generated>
//------------------------------------------------------------------------------

//#define TestTemplate
using System;

#pragma warning disable 0649    // warning CS0649: Field '...' is never assigned to, and will always have its default value 0
namespace HQCommon.MemTables
{

    public struct AssetType : IRow
    {
        [DbColumn(0)]   public HQCommon.AssetType   ID;
        [DbColumn(1)]   public string               Name;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 16;     // x64 (1+8+1[+6]) [with alignment]
    }

    public struct ChinaAnalystGrade : IRow
    {
        [DbColumn(0)]       public int      StockID;
        [DbColumn(1,"s")]   public DateTime Date;
        [DbColumn(2)]       public float    Value;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 24;     // x64 (4+8+4+1[+7]) [with alignment]
    }

    public struct Company : IRow
    {
        [DbColumn(0,"I")]   public int          ID;
        [DbColumn(1,"?")]   public string       Name;
        [DbColumn(2,"?")]   public string       Description;
        [DbColumn(3,"?")]   public string       WebSite;
        [DbColumn(4,"4")]   public CurrencyID?  BaseCurrencyID;
        [DbColumn(5)]       public CountryCode? BaseCountryID;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 40;     // x64 (4+8+8+8+2+4+1[+5]) [with alignment]
    }

    public struct Company_Sector_Relation : IRow
    {
        [DbColumn(0)]   public int  CompanyID;
        [DbColumn(1)]   public int  SectorID;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 12;     // x64 (4+4+1[+3]) [with alignment]
    }

    public struct Currency : IRow
    {
        [DbColumn(0)]       public short    ID;
        [DbColumn(1,"?")]   public string   Sign;
        [DbColumn(2,"?")]   public string   IsoCode;
        [DbColumn(3,"?")]   public string   Description;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 32;     // x64 (2+8+8+8+1[+5]) [with alignment]
    }

    public struct EarningsEstimate : IRow
    {
        [DbColumn(0)]       public EarningsEstimateFlags    Flags;
        [DbColumn(1)]       public int                      StockID;
        [DbColumn(2)]       public EarningsEstimateTypeID   TypeID;
        [DbColumn(3,"D")]   public DateOnly                 ReleaseDate;
        [DbColumn(4,"D")]   public DateOnly                 EstimationDate;
        [DbColumn(5)]       public float?                   EstimationValue;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 24;     // x64 (1+4+1+2+2+8+1[+5]) [with alignment]
    }

    public class EarningsEventCalculatedIndicators : IRow
    {
        [DbColumn(0,"D")]   public DateOnly     EventDate;
        [DbColumn(1)]       public int          StockID;
        [DbColumn(2)]       public byte?        Timing;
        [DbColumn(3,"D")]   public DateOnly?    VirtualReleaseDate;
        [DbColumn(4,"D")]   public DateOnly?    MarketDayAfterTheEvent;
        [DbColumn(5,"?")]   public float        EarningsEstimate;   //     NaN represents NULL
        [DbColumn(6,"?")]   public float        EarningsActual; //         NaN represents NULL
        [DbColumn(7,"?")]   public float        RevenueEstimate;    //     NaN represents NULL
        [DbColumn(8,"?")]   public float        RevenueActual;  //         NaN represents NULL
        [DbColumn(9,"?")]   public float        Prev3MonthsVolumeAvg;   // NaN represents NULL
        [DbColumn(10,"?")]  public float        SHIR;   //                 NaN represents NULL
        [DbColumn(11,"?")]  public float        SHIRPercentileRanking;  // NaN represents NULL
        [DbColumn(12,"?")]  public float        PE; //                     NaN represents NULL
        [DbColumn(13,"?")]  public float        PEPercentileRanking;    // NaN represents NULL
        [DbColumn(14,"?")]  public float        SMA7;   //                 NaN represents NULL
        [DbColumn(15,"?")]  public float        SMA7PercentileRanking;  // NaN represents NULL
        [DbColumn(16,"?")]  public float        SMA2;   //                 NaN represents NULL
        [DbColumn(17,"?")]  public float        SMA2PercentileRanking;  // NaN represents NULL
        [DbColumn(18,"?")]  public float        RSI;    //                 NaN represents NULL
        [DbColumn(19,"?")]  public float        RSIPercentileRanking;   // NaN represents NULL
        [DbColumn(20,"?")]  public float        LCPS;   //                 NaN represents NULL
        [DbColumn(21,"?")]  public float        LCPSPercentileRanking;  // NaN represents NULL
        [DbColumn(22)]      public float        PrevClosePrice;
        [DbColumn(23)]      public float        PostOpenPrice;
        [DbColumn(24)]      public float        PostClosePrice;
        [DbColumn(25)]      public float        PostHighPrice;
        [DbColumn(26)]      public float        PostLowPrice;
        [DbColumn(27)]      public float        SPYopenGap;
        [DbColumn(28)]      public float        RelOpenGap;
        [DbColumn(29,"?")]  public float        EarningsActualPrevYear; // NaN represents NULL
        [DbColumn(30,"?")]  public float        RevenueActualPrevYear;  // NaN represents NULL
        [DbColumn(31,"?")]  public float        NextDayOpenToClose; //     NaN represents NULL
        [DbColumn(32,"?")]  public float        CloseToNextDayClose;    // NaN represents NULL
        [DbColumn(33,"?")]  public float        VirtualReleaseDayOpenToClose;   //NaN represents NULL
                            public float        OpenGap       { get { return (PostOpenPrice - PrevClosePrice)/PrevClosePrice; } }
        [DbColumn(34,"?")]  public float        RevenuePerMC;   //                NaN represents NULL
        [DbColumn(35,"?")]  public float        IncomePerMC;    //                NaN represents NULL
        [DbColumn(36,"?")]  public float        CashPerMC;  //                    NaN represents NULL
        [DbColumn(37,"?")]  public float        DeptPerMC;  //                    NaN represents NULL
        [DbColumn(38,"?")]  public float        RevenuePerMCPercentileRanking;  //NaN represents NULL
        [DbColumn(39,"?")]  public float        IncomePerMCPercentileRanking;   //NaN represents NULL
        [DbColumn(40,"?")]  public float        CashPerMCPercentileRanking; //    NaN represents NULL
        [DbColumn(41,"?")]  public float        DeptPerMCPercentileRanking; //    NaN represents NULL
        [DbColumn(42,"?")]  public float        RevenuePerMCMainSectorRelative; //NaN represents NULL
        [DbColumn(43,"?")]  public float        IncomePerMCMainSectorRelative;  //NaN represents NULL
        [DbColumn(44,"?")]  public float        CashPerMCMainSectorRelative;    //NaN represents NULL
        [DbColumn(45,"?")]  public float        DeptPerMCMainSectorRelative;    //NaN represents NULL
        [DbColumn(46,"?")]  public float        RevenuePerMCSubSectorRelative;  //NaN represents NULL
        [DbColumn(47,"?")]  public float        IncomePerMCSubSectorRelative;   //NaN represents NULL
        [DbColumn(48,"?")]  public float        CashPerMCSubSectorRelative; //    NaN represents NULL
        [DbColumn(49,"?")]  public float        DeptPerMCSubSectorRelative; //    NaN represents NULL

        public override string ToString() { return DBUtils.ToStringByFields(this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 216;     // x64 (16+2+4+2+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+4+1[+3]) [with alignment]
    }

    public class FileSystemItem : IRow
    {
        [DbColumn(0,"I")]   public int                  ID;
        [DbColumn(1)]       public string               Name;
        [DbColumn(2)]       public HQUserID             UserID;
        [DbColumn(3)]       public FileSystemItemTypeID TypeID;
        [DbColumn(4)]       public int                  ParentFolderID;
        [DbColumn(5)]       public DateTime             LastWriteTime;
        [DbColumn(6,"?")]   public string               Note;

        public override string ToString() { return DBUtils.ToStringByFields(this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 56;     // x64 (16+4+8+4+1+4+8+8+1[+2]) [with alignment]
    }

    public struct FinancialData : IRow
    {
        [DbColumn(0)]       public FinancialDataTypeID  TypeID;
        [DbColumn(1)]       public int                  CompanyID;
        [DbColumn(2,"s")]   public DateTime             Date;
        [DbColumn(3)]       public short                PeriodDays;
        [DbColumn(4)]       public CurrencyID           CurrencyID;
        [DbColumn(5)]       public float                Value;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 24;     // x64 (1+4+8+2+1+4+1[+3]) [with alignment]
    }

    public struct FoolSecurityRate : IRow
    {
        [DbColumn(0)]       public int      StockID;
        [DbColumn(1,"s")]   public DateTime Date;
        [DbColumn(2)]       public byte?    Rate;
        [DbColumn(3)]       public int?     Bulls;
        [DbColumn(4)]       public int?     Bears;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 32;     // x64 (4+8+2+8+8+1[+1]) [with alignment]
    }

    public struct FSPortfolio : IRow
    {
        [DbColumn(0)]   public int  FileSystemItemID;
        [DbColumn(1)]   public byte Flags;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 =  8;     // x64 (4+1+1[+2]) [with alignment]
    }

    public class Fund : IRow
    {
        [DbColumn(0,"I")]   public int      ID;
        [DbColumn(1)]       public int?     FundManagerID;
        [DbColumn(2,"?")]   public string   Name;

        public override string ToString() { return DBUtils.ToStringByFields(this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 40;     // x64 (16+4+8+8+1[+3]) [with alignment]
    }

    public struct Futures : IRow
    {
        [DbColumn(0,"I")]   public int                  ID;
        [DbColumn(1)]       public HQCommon.AssetType   UnderlyingAssetType;
        [DbColumn(2)]       public int                  UnderlyingSubTableID;
        [DbColumn(3,"D")]   public DateOnly             ExpirationDate;
        [DbColumn(4)]       public short                Multiplier;
        [DbColumn(5)]       public StockExchangeID      StockExchangeID;
        [DbColumn(6,"4")]   public CurrencyID           CurrencyID;
        [DbColumn(7,"?")]   public string               Ticker;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 24;     // x64 (4+1+4+2+2+1+1+8+1)
    }

    public struct FuturesQuote : IRow
    {
        [DbColumn(0,"D")]   public DateOnly Date;
        [DbColumn(1)]       public int      FuturesID;
        [DbColumn(2,"?")]   public float    OpenPrice;  // NaN represents NULL
        [DbColumn(3,"?")]   public float    HighPrice;  // NaN represents NULL
        [DbColumn(4,"?")]   public float    LowPrice;   // NaN represents NULL
        [DbColumn(5,"?")]   public float    ClosePrice; // NaN represents NULL
        [DbColumn(6)]       public float    SettlePrice;
        [DbColumn(7)]       public int      Volume;
        [DbColumn(8)]       public int      OpenInterest;
        [DbColumn(9)]       public short    EFP;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 40;     // x64 (2+4+4+4+4+4+4+4+4+2+1[+3]) [with alignment]
    }

    public struct GeoInvestingGrade : IRow
    {
        [DbColumn(0)]       public GeoInvestingGradesType   Type;
        [DbColumn(1)]       public int                      StockID;
        [DbColumn(2,"s")]   public DateTime                 Date;
        [DbColumn(3)]       public GeoInvestingGradesValue  Value;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 16;     // x64 (1+4+8+1+1[+1]) [with alignment]
    }

    public struct HistoricalDoubleItem : IRow
    {
        [DbColumn(0)]       public HistoricalDoubleItemTypeID   TypeID;
        [DbColumn(1)]       public int                          SubTableID;
        [DbColumn(2,"s")]   public DateTime                     Date;
        [DbColumn(3)]       public double                       DoubleData;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 24;     // x64 (1+4+8+8+1[+2]) [with alignment]
    }

    public struct HistoricalIntItem : IRow
    {
        [DbColumn(0)]       public HistoricalIntItemTypeID  TypeID;
        [DbColumn(1)]       public int                      SubTableID;
        [DbColumn(2,"s")]   public DateTime                 Date;
        [DbColumn(3)]       public int                      IntData;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 24;     // x64 (1+4+8+4+1[+6]) [with alignment]
    }

    public struct HistoricalStringItem : IRow
    {
        [DbColumn(0)]       public HistoricalStringItemTypeID   TypeID;
        [DbColumn(1)]       public int                          SubTableID;
        [DbColumn(2,"s")]   public DateTime                     Date;
        [DbColumn(3)]       public string                       StringData;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 24;     // x64 (1+4+8+8+1[+2]) [with alignment]
    }

    public struct HQUser : IRow
    {
        [DbColumn(0)]       public HQUserID ID;
        [DbColumn(1,"?")]   public string   UserName;
        [DbColumn(2,"?")]   public string   Password;
        [DbColumn(3,"?")]   public string   FirstName;
        [DbColumn(4,"?")]   public string   LastName;
        [DbColumn(5,"?")]   public string   OAuthUserName;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 48;     // x64 (4+8+8+8+8+8+1[+3]) [with alignment]
    }

    public struct HQUser_HQUserGroup_Relation : IRow
    {
        [DbColumn(0)]   public HQUserID         UserID;
        [DbColumn(1)]   public HQUserGroupID    UserGroupID;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 12;     // x64 (4+4+1[+3]) [with alignment]
    }

    public struct HQUserGroup : IRow
    {
        [DbColumn(0)]   public HQUserGroupID    ID;
        [DbColumn(1)]   public string           Name;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 16;     // x64 (4+8+1[+3]) [with alignment]
    }

    public struct IbdGrade : IRow
    {
        [DbColumn(0)]       public IbdGradeType Type;
        [DbColumn(1)]       public int          StockID;
        [DbColumn(2,"s")]   public DateTime     Date;
        [DbColumn(3)]       public byte         Value;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 16;     // x64 (1+4+8+1+1[+1]) [with alignment]
    }

    public class Ipo : IRow
    {
        [DbColumn(0)]       public int          StockID;
        [DbColumn(1,"?")]   public string       LeadUnderwriters;
        [DbColumn(2,"?")]   public string       Underwriters;
                            int[]               m_uids, m_luids;
                            public int[]        UnderwriterIDs {
                                get { return Get(ref m_uids, Underwriters);  }
                                set { m_uids = Set(value, ref Underwriters); }
                            }
                            public int[]        LeadUnderwriterIDs {
                                get { return Get(ref m_luids, LeadUnderwriters);  }
                                set { m_luids = Set(value, ref LeadUnderwriters); }
                            }
                            int[] Get(ref int[] p_ids, StringSegment p_str)
                            {
                                return (p_ids ?? (p_ids = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Select(
                                        p_str.Split(" "), ss => Utils.FastParseInt(ss)))));
                            }
                            int[] Set(int[] p_ids, ref string p_str)
                            {
                                p_str = (p_ids == null) ? null : String.Join(" ", p_ids);
                                return p_ids;
                            }
        [DbColumn(3,"D")]   public DateOnly     IPODate;
        [DbColumn(4,"D")]   public DateOnly?    QuietPeriodEndDate;
        [DbColumn(5,"D")]   public DateOnly?    LockupPeriodEndDate;
        [DbColumn(6)]       public float?       InitialFloat;
        [DbColumn(7)]       public float?       InitialRevenue;

        public override string ToString() { return DBUtils.ToStringByFields(this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 64;     // x64 (16+4+8+8+2+4+4+8+8+1[+1]) [with alignment]
    }

    public class IpoUnderwriter : IRow
    {
        [DbColumn(0,"I")]   public int      ID;
        [DbColumn(1,"?")]   public string   Name;

        public override string ToString() { return DBUtils.ToStringByFields(this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 32;     // x64 (16+4+8+1[+3]) [with alignment]
    }

    public struct MarketHoliday : IRow
    {
        [DbColumn(0)]       public CountryID    CountryID;
        [DbColumn(1,"s")]   public DateTime     Date;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 16;     // x64 (1+8+1[+6]) [with alignment]
    }

    public struct MiscProperties : IRow
    {
        [DbColumn(0)]       public string   Name;
        [DbColumn(1,"?")]   public string   Value;
        [DbColumn(2)]       public DateTime LastWriteTime;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 32;     // x64 (8+8+8+1[+7]) [with alignment]
    }

    public struct NavellierStockGrade : IRow
    {
        [DbColumn(0,"s")]   public DateTime Date;
        [DbColumn(1)]       public int      StockID;
        [DbColumn(2)]       public char     Total;
        [DbColumn(3)]       public char     ProprietaryQuantitative;
        [DbColumn(4)]       public char     OverallFundamental;
        [DbColumn(5)]       public char     SalesGrowth;
        [DbColumn(6)]       public char     OperatingMarginGrowth;
        [DbColumn(7)]       public char     EarningsGrowth;
        [DbColumn(8)]       public char     EarningsRevisions;
        [DbColumn(9)]       public char     EarningsSurprise;
        [DbColumn(10)]      public char     EarningsMomentum;
        [DbColumn(11)]      public char     ROE;
        [DbColumn(12)]      public char     FreeCashFlow;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 40;     // x64 (8+4+2+2+2+2+2+2+2+2+2+2+2+1[+5]) [with alignment]
    }

    public struct Option : IRow
    {
        [DbColumn(0,"I")]   public int                  ID;
        [DbColumn(1)]       public HQCommon.AssetType   UnderlyingAssetType;
        [DbColumn(2)]       public int                  UnderlyingSubTableID;
        [DbColumn(3)]       public OptionFlags          Flags;
        [DbColumn(4,"D")]   public DateOnly             ExpirationDate;
        [DbColumn(5)]       public float                StrikePrice;
        [DbColumn(6)]       public StockExchangeID      StockExchangeID;
        [DbColumn(7,"4")]   public CurrencyID           CurrencyID;
                            public bool                 IsCall          { get { return (Flags & OptionFlags.IsCall        ) != 0; } }
                            public bool                 IsMultiplierUK  { get { return (Flags & OptionFlags.IsMultiplierUK) != 0; } }
                            public bool                 IsOptionTypeEU  { get { return (Flags & OptionFlags.IsOptionTypeEU) != 0; } }

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 20;     // x64 (4+1+4+1+2+4+1+1+1[+1]) [with alignment]
    }

    public struct OptionQuote : IRow
    {
        [DbColumn(0)]       public int      OptionID;
        [DbColumn(1,"D")]   public DateOnly Date;
        [DbColumn(2,"?")]   public float    AskPrice;   // NaN represents NULL
        [DbColumn(3,"?")]   public float    BidPrice;   // NaN represents NULL
        [DbColumn(4,"?")]   public float    LastPrice;  // NaN represents NULL
        [DbColumn(5)]       public int?     Volume;
        [DbColumn(6)]       public int?     OpenInterest;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 40;     // x64 (4+2+4+4+4+8+8+1[+5]) [with alignment]
    }

    /// <summary> It is 'struct' to save memory, because this type is used by MemTables to store rows. </summary>
    public struct PortfolioItem : IRow
    {
        [DbColumn(0,"I")]   public int                              ID;
        [DbColumn(1)]       public int                              PortfolioID;
        [DbColumn(2)]       public PortfolioItemTransactionType?    TransactionType;
        [DbColumn(3)]       public HQCommon.AssetType               AssetTypeID;
        [DbColumn(4)]       public int                              AssetSubTableID;
        [DbColumn(5)]       public int?                             Volume;
        [DbColumn(6)]       public float?                           Price;
        [DbColumn(7,"s")]   public DateTime                         Date;
        [DbColumn(8,"?")]   public string                           Note;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 48;     // x64 (4+4+2+1+4+8+8+8+8+1)
    }

    public class PowerEvent : IRow
    {
        [DbColumn(0,"I")]   public int          ID;
        [DbColumn(1)]       public int          UserID;
        [DbColumn(2)]       public string       Name;
        [DbColumn(3,"s")]   public DateTime     EventStartDateTimeUtc;
        [DbColumn(4,"?")]   public string       Urls;
        [DbColumn(5)]       public int?         InfluencedQuickfolioID;
        [DbColumn(6,"s")]   public DateTime?    InfluenceStartDateTimeUtc;
        [DbColumn(7,"s")]   public DateTime?    InfluenceEndDateTimeUtc;
        [DbColumn(8,"s")]   public DateTime?    EventEndDateTimeUtc;

        public override string ToString() { return DBUtils.ToStringByFields(this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 112;     // x64 (16+4+4+8+8+8+8+16+16+16+1[+7]) [with alignment]
    }

    public struct QuickfolioItem : IRow
    {
        [DbColumn(0,"I")]   public int  ID;
        [DbColumn(1)]       public int  QuickfolioID;
        [DbColumn(2)]       public byte AssetTypeID;
        [DbColumn(3)]       public int  AssetSubTableID;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 16;     // x64 (4+4+1+4+1[+2]) [with alignment]
    }

    public struct SeasonalEdge : IRow
    {
        [DbColumn(0)]       public int      StockID;
        [DbColumn(1,"s")]   public DateTime Date;
        [DbColumn(2)]       public short    EdgeTradingDays;
        [DbColumn(3)]       public byte     EdgeIndex;
        [DbColumn(4)]       public float    EdgePeak;
        [DbColumn(5)]       public float    EdgeSum;
        [DbColumn(6)]       public float    PercentReturn;
        [DbColumn(7)]       public byte     UsdVolumePercentileGrade;
        [DbColumn(8)]       public byte     TotalOccurences;
        [DbColumn(9)]       public byte     EdgeOccurences;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 32;     // x64 (4+8+2+1+4+4+4+1+1+1+1[+1]) [with alignment]
    }

    public class Sector : IRow
    {
        [DbColumn(0,"I")]   public int          ID;
        [DbColumn(1)]       public string       Name;
        [DbColumn(2)]       public SectorType   Type;

        public override string ToString() { return DBUtils.ToStringByFields(this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 32;     // x64 (16+4+8+1+1[+2]) [with alignment]
    }

    public struct Sector_Sector_Relation : IRow
    {
        [DbColumn(0)]   public int  SectorID1;
        [DbColumn(1)]   public int  SectorID2;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 12;     // x64 (4+4+1[+3]) [with alignment]
    }

    public struct Stock : IRow
    {
        [DbColumn(0,"I")]   public int              ID;
        [DbColumn(1)]       public int?             CompanyID;
        [DbColumn(2)]       public int?             FundID;
        [DbColumn(3,"?")]   public string           ISIN;
        [DbColumn(4)]       public string           Ticker;
        [DbColumn(5)]       public bool             IsAlive;
        [DbColumn(6,"4")]   public CurrencyID?      CurrencyID;
        [DbColumn(7)]       public StockExchangeID? StockExchangeID;
        [DbColumn(8,"?")]   public string           Name;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 56;     // x64 (4+8+8+8+8+1+2+2+8+1[+6]) [with alignment]
    }

    public struct StockExchange : IRow
    {
        [DbColumn(0,"I")]   public StockExchangeID  ID;
        [DbColumn(1)]       public string           Name;
        [DbColumn(2,"?")]   public string           Description;
        [DbColumn(3)]       public TimeZoneID       TimeZone;
        [DbColumn(4)]       public byte             CountryID;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 24;     // x64 (1+8+8+1+1+1[+4]) [with alignment]
    }

    public struct StockIndex : IRow
    {
        [DbColumn(0,"I")]   public StockIndexID ID;
        [DbColumn(1)]       public string       Name;
        [DbColumn(2,"?")]   public string       Ticker;
        [DbColumn(3,"?")]   public string       Description;
        [DbColumn(4,"4")]   public CurrencyID?  CurrencyID;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 32;     // x64 (2+8+8+8+2+1[+3]) [with alignment]
    }

    public struct StockIndexQuote : IRow
    {
        [DbColumn(0)]       public short    StockIndexID;
        [DbColumn(1,"s")]   public DateTime Date;
        [DbColumn(2,"?")]   public float    OpenPrice;  // NaN represents NULL
        [DbColumn(3,"?")]   public float    ClosePrice; // NaN represents NULL
        [DbColumn(4,"?")]   public float    HighPrice;  // NaN represents NULL
        [DbColumn(5,"?")]   public float    LowPrice;   // NaN represents NULL
        [DbColumn(6)]       public long?    Volume;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 48;     // x64 (2+8+4+4+4+4+16+1[+5]) [with alignment]
    }

    public struct StockQuote : IRow
    {
        [DbColumn(0)]       public int      StockID;
        [DbColumn(1,"s")]   public DateTime Date;
        [DbColumn(2,"?")]   public float    OpenPrice;  // NaN represents NULL
        [DbColumn(3,"?")]   public float    ClosePrice; // NaN represents NULL
        [DbColumn(4,"?")]   public float    HighPrice;  // NaN represents NULL
        [DbColumn(5,"?")]   public float    LowPrice;   // NaN represents NULL
        [DbColumn(6)]       public long?    Volume;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 48;     // x64 (4+8+4+4+4+4+16+1[+3]) [with alignment]
    }

    public struct StockScouterGrade : IRow
    {
        [DbColumn(0)]       public int                      StockID;
        [DbColumn(1,"s")]   public DateTime                 Date;
        [DbColumn(2)]       public StockScouterGradeType    Type;
        [DbColumn(3)]       public byte                     Value;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 16;     // x64 (4+8+1+1+1[+1]) [with alignment]
    }

    public struct StockScouterGroupFavor : IRow
    {
        [DbColumn(0)]       public StockScouterGroupID  GroupID;
        [DbColumn(1,"s")]   public DateTime             Date;
        [DbColumn(2)]       public byte                 Value;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 16;     // x64 (1+8+1+1[+5]) [with alignment]
    }

    public struct StockSplitDividend : IRow
    {
        [DbColumn(0)]       public int      StockID;
        [DbColumn(1,"s")]   public DateOnly Date;
        [DbColumn(2)]       public bool     IsSplit;
        [DbColumn(3)]       public float    DividendOrPrevClosePrice;
        [DbColumn(4)]       public short?   OldVolume;
        [DbColumn(5)]       public short?   NewVolume;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 20;     // x64 (4+2+1+4+4+4+1)
    }

    public struct TableID : IRow
    {
        [DbColumn(0)]   public string   Name;
        [DbColumn(1)]   public byte     ID;
        [DbColumn(2)]   public int?     VersionNumber;
        [DbColumn(3)]   public DateTime LastWriteTime;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 32;     // x64 (8+1+8+8+1[+6]) [with alignment]
    }

    public class Tag : IRow
    {
        [DbColumn(0,"I")]   public int      ID;
        [DbColumn(1)]       public string   Name;

        public override string ToString() { return DBUtils.ToStringByFields(this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 32;     // x64 (16+4+8+1[+3]) [with alignment]
    }

    public struct Tag_Company_Relation : IRow
    {
        [DbColumn(0)]   public int  TagID;
        [DbColumn(1)]   public int  CompanyID;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 12;     // x64 (4+4+1[+3]) [with alignment]
    }

    public struct Tag_PowerEvent_Relation : IRow
    {
        [DbColumn(0)]   public int  TagID;
        [DbColumn(1)]   public int  PowerEventID;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 12;     // x64 (4+4+1[+3]) [with alignment]
    }

    public struct TimingCubeMarketSignal : IRow
    {
        [DbColumn(0,"s")]   public DateTime                 Date;
        [DbColumn(1)]       public TimingCubeMarketSignalID Signal;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 16;     // x64 (8+1+1[+6]) [with alignment]
    }

    public struct VectorVestMarketSignal : IRow
    {
        [DbColumn(0,"s")]   public DateTime                 Date;
        [DbColumn(1)]       public VectorVestMarketSignalID Signal;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 16;     // x64 (8+1+1[+6]) [with alignment]
    }

    public struct VectorVestSignal : IRow
    {
        [DbColumn(0,"s")]   public DateTime             Date;
        [DbColumn(1)]       public int                  Buys;
        [DbColumn(2)]       public int                  Sells;
        [DbColumn(3)]       public int                  Holds;
        [DbColumn(4)]       public double               VVCompositePrice;
        [DbColumn(5)]       public double               VVCompositeRelativeTiming;
        [DbColumn(6)]       public double               MarketTimingIndicator;
        [DbColumn(7)]       public VectorVestColorGuard ColorGuardVVCPrice;
        [DbColumn(8)]       public VectorVestColorGuard ColorGuardVVCRelativeTiming;
        [DbColumn(9)]       public VectorVestColorGuard ColorGuardBuySellRatio;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 48;     // x64 (8+4+4+4+8+8+8+1+1+1+1)
    }

    public struct ZacksGrade : IRow
    {
        [DbColumn(0)]       public ZacksGradeType   Type;
        [DbColumn(1)]       public int              StockID;
        [DbColumn(2,"s")]   public DateTime         Date;
        [DbColumn(3)]       public byte             Value;

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 16;     // x64 (1+4+8+1+1[+1]) [with alignment]
    }


#if TestTemplate
/*TEMPLATE_BEGIN*/
    public struct MyTableRow : IRow
    {
        /*FIELDS_BEGIN*/
        [DbColumn(0)]       internal string   Name;
        [DbColumn(1,"?")]   internal string   Value;
        /*FIELDS_END*/

        public override string ToString() { return DBUtils.ToStringByFields(ref this); }
        DbOperationFlag IRow.RowState { get; set; }
        const int EstimatedSize64 = 24;     // x64 (1+8+8) [with alignment]
    }
/*TEMPLATE_END*/
#endif
}
#pragma warning restore 0649

#if !TestTemplate
namespace HQCommon
{
    public static partial class DBUtils
    {
        // The date when this file was generated (yyMMdd)
        public const int MemTablesVersion = 141124;
    }
}
#endif