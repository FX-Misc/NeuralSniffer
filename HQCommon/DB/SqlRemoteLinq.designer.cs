#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HQCommon.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HedgeQuant")]
	public partial class DBDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertIbdGrade(IbdGrade instance);
    partial void UpdateIbdGrade(IbdGrade instance);
    partial void DeleteIbdGrade(IbdGrade instance);
    partial void InsertZacksGrade(ZacksGrade instance);
    partial void UpdateZacksGrade(ZacksGrade instance);
    partial void DeleteZacksGrade(ZacksGrade instance);
    partial void InsertHistoricalStringItem(HistoricalStringItem instance);
    partial void UpdateHistoricalStringItem(HistoricalStringItem instance);
    partial void DeleteHistoricalStringItem(HistoricalStringItem instance);
    partial void InsertHistoricalIntItem(HistoricalIntItem instance);
    partial void UpdateHistoricalIntItem(HistoricalIntItem instance);
    partial void DeleteHistoricalIntItem(HistoricalIntItem instance);
    partial void InsertNavellierStockGrade(NavellierStockGrade instance);
    partial void UpdateNavellierStockGrade(NavellierStockGrade instance);
    partial void DeleteNavellierStockGrade(NavellierStockGrade instance);
    partial void InsertFoolSecurityRate(FoolSecurityRate instance);
    partial void UpdateFoolSecurityRate(FoolSecurityRate instance);
    partial void DeleteFoolSecurityRate(FoolSecurityRate instance);
    partial void InsertPortfolioItem(PortfolioItem instance);
    partial void UpdatePortfolioItem(PortfolioItem instance);
    partial void DeletePortfolioItem(PortfolioItem instance);
    partial void InsertSector_Sector_Relation(Sector_Sector_Relation instance);
    partial void UpdateSector_Sector_Relation(Sector_Sector_Relation instance);
    partial void DeleteSector_Sector_Relation(Sector_Sector_Relation instance);
    partial void InsertSector(Sector instance);
    partial void UpdateSector(Sector instance);
    partial void DeleteSector(Sector instance);
    partial void InsertCompany_Sector_Relation(Company_Sector_Relation instance);
    partial void UpdateCompany_Sector_Relation(Company_Sector_Relation instance);
    partial void DeleteCompany_Sector_Relation(Company_Sector_Relation instance);
    partial void InsertStockSplitDividend(StockSplitDividend instance);
    partial void UpdateStockSplitDividend(StockSplitDividend instance);
    partial void DeleteStockSplitDividend(StockSplitDividend instance);
    partial void InsertVectorVestSignal(VectorVestSignal instance);
    partial void UpdateVectorVestSignal(VectorVestSignal instance);
    partial void DeleteVectorVestSignal(VectorVestSignal instance);
    partial void InsertStockOptionQuote(StockOptionQuote instance);
    partial void UpdateStockOptionQuote(StockOptionQuote instance);
    partial void DeleteStockOptionQuote(StockOptionQuote instance);
    partial void InsertStockOption(StockOption instance);
    partial void UpdateStockOption(StockOption instance);
    partial void DeleteStockOption(StockOption instance);
    partial void InsertTimingCubeMarketSignal(TimingCubeMarketSignal instance);
    partial void UpdateTimingCubeMarketSignal(TimingCubeMarketSignal instance);
    partial void DeleteTimingCubeMarketSignal(TimingCubeMarketSignal instance);
    partial void InsertFinancialData(FinancialData instance);
    partial void UpdateFinancialData(FinancialData instance);
    partial void DeleteFinancialData(FinancialData instance);
    partial void InsertSeasonalEdge(SeasonalEdge instance);
    partial void UpdateSeasonalEdge(SeasonalEdge instance);
    partial void DeleteSeasonalEdge(SeasonalEdge instance);
    partial void InsertStockScouterGroupFavor(StockScouterGroupFavor instance);
    partial void UpdateStockScouterGroupFavor(StockScouterGroupFavor instance);
    partial void DeleteStockScouterGroupFavor(StockScouterGroupFavor instance);
    partial void InsertFileSystemItem(FileSystemItem instance);
    partial void UpdateFileSystemItem(FileSystemItem instance);
    partial void DeleteFileSystemItem(FileSystemItem instance);
    partial void InsertFSPortfolio(FSPortfolio instance);
    partial void UpdateFSPortfolio(FSPortfolio instance);
    partial void DeleteFSPortfolio(FSPortfolio instance);
    partial void InsertStockScouterGrade(StockScouterGrade instance);
    partial void UpdateStockScouterGrade(StockScouterGrade instance);
    partial void DeleteStockScouterGrade(StockScouterGrade instance);
    partial void InsertCompany(Company instance);
    partial void UpdateCompany(Company instance);
    partial void DeleteCompany(Company instance);
    partial void InsertChinaAnalystGrade(ChinaAnalystGrade instance);
    partial void UpdateChinaAnalystGrade(ChinaAnalystGrade instance);
    partial void DeleteChinaAnalystGrade(ChinaAnalystGrade instance);
    partial void InsertHistoricalDoubleItem(HistoricalDoubleItem instance);
    partial void UpdateHistoricalDoubleItem(HistoricalDoubleItem instance);
    partial void DeleteHistoricalDoubleItem(HistoricalDoubleItem instance);
    partial void InsertGeoInvestingGrade(GeoInvestingGrade instance);
    partial void UpdateGeoInvestingGrade(GeoInvestingGrade instance);
    partial void DeleteGeoInvestingGrade(GeoInvestingGrade instance);
    partial void InsertStockQuote(StockQuote instance);
    partial void UpdateStockQuote(StockQuote instance);
    partial void DeleteStockQuote(StockQuote instance);
    partial void InsertEarningsEstimate(EarningsEstimate instance);
    partial void UpdateEarningsEstimate(EarningsEstimate instance);
    partial void DeleteEarningsEstimate(EarningsEstimate instance);
    partial void InsertQuickfolioItem(QuickfolioItem instance);
    partial void UpdateQuickfolioItem(QuickfolioItem instance);
    partial void DeleteQuickfolioItem(QuickfolioItem instance);
    partial void InsertCurrency(Currency instance);
    partial void UpdateCurrency(Currency instance);
    partial void DeleteCurrency(Currency instance);
    partial void InsertHQUser(HQUser instance);
    partial void UpdateHQUser(HQUser instance);
    partial void DeleteHQUser(HQUser instance);
    partial void InsertHQUserGroup(HQUserGroup instance);
    partial void UpdateHQUserGroup(HQUserGroup instance);
    partial void DeleteHQUserGroup(HQUserGroup instance);
    partial void InsertHQUser_HQUserGroup_Relation(HQUser_HQUserGroup_Relation instance);
    partial void UpdateHQUser_HQUserGroup_Relation(HQUser_HQUserGroup_Relation instance);
    partial void DeleteHQUser_HQUserGroup_Relation(HQUser_HQUserGroup_Relation instance);
    partial void InsertVectorVestMarketSignal(VectorVestMarketSignal instance);
    partial void UpdateVectorVestMarketSignal(VectorVestMarketSignal instance);
    partial void DeleteVectorVestMarketSignal(VectorVestMarketSignal instance);
    partial void InsertMarketHoliday(MarketHoliday instance);
    partial void UpdateMarketHoliday(MarketHoliday instance);
    partial void DeleteMarketHoliday(MarketHoliday instance);
    partial void InsertNewsItem(NewsItem instance);
    partial void UpdateNewsItem(NewsItem instance);
    partial void DeleteNewsItem(NewsItem instance);
    partial void InsertPowerEvent(PowerEvent instance);
    partial void UpdatePowerEvent(PowerEvent instance);
    partial void DeletePowerEvent(PowerEvent instance);
    partial void InsertTag_PowerEvent_Relation(Tag_PowerEvent_Relation instance);
    partial void UpdateTag_PowerEvent_Relation(Tag_PowerEvent_Relation instance);
    partial void DeleteTag_PowerEvent_Relation(Tag_PowerEvent_Relation instance);
    partial void InsertTag(Tag instance);
    partial void UpdateTag(Tag instance);
    partial void DeleteTag(Tag instance);
    partial void InsertStockIndex(StockIndex instance);
    partial void UpdateStockIndex(StockIndex instance);
    partial void DeleteStockIndex(StockIndex instance);
    partial void InsertStockIndexQuote(StockIndexQuote instance);
    partial void UpdateStockIndexQuote(StockIndexQuote instance);
    partial void DeleteStockIndexQuote(StockIndexQuote instance);
    partial void InsertFuturesQuote(FuturesQuote instance);
    partial void UpdateFuturesQuote(FuturesQuote instance);
    partial void DeleteFuturesQuote(FuturesQuote instance);
    partial void InsertFuture(Future instance);
    partial void UpdateFuture(Future instance);
    partial void DeleteFuture(Future instance);
    partial void InsertStockExchange(StockExchange instance);
    partial void UpdateStockExchange(StockExchange instance);
    partial void DeleteStockExchange(StockExchange instance);
    partial void InsertStock(Stock instance);
    partial void UpdateStock(Stock instance);
    partial void DeleteStock(Stock instance);
    partial void InsertEarningsEventCalculatedIndicator(EarningsEventCalculatedIndicator instance);
    partial void UpdateEarningsEventCalculatedIndicator(EarningsEventCalculatedIndicator instance);
    partial void DeleteEarningsEventCalculatedIndicator(EarningsEventCalculatedIndicator instance);
    partial void InsertIpo(Ipo instance);
    partial void UpdateIpo(Ipo instance);
    partial void DeleteIpo(Ipo instance);
    partial void InsertIpoUnderwriter(IpoUnderwriter instance);
    partial void UpdateIpoUnderwriter(IpoUnderwriter instance);
    partial void DeleteIpoUnderwriter(IpoUnderwriter instance);
    #endregion
		
		public DBDataClassesDataContext() : 
				base(global::HQCommon.Properties.Settings.Default.ServerHedgeQuantConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<IbdGrade> IbdGrades
		{
			get
			{
				return this.GetTable<IbdGrade>();
			}
		}
		
		public System.Data.Linq.Table<ZacksGrade> ZacksGrades
		{
			get
			{
				return this.GetTable<ZacksGrade>();
			}
		}
		
		public System.Data.Linq.Table<HistoricalStringItem> HistoricalStringItems
		{
			get
			{
				return this.GetTable<HistoricalStringItem>();
			}
		}
		
		public System.Data.Linq.Table<HistoricalIntItem> HistoricalIntItems
		{
			get
			{
				return this.GetTable<HistoricalIntItem>();
			}
		}
		
		public System.Data.Linq.Table<NavellierStockGrade> NavellierStockGrades
		{
			get
			{
				return this.GetTable<NavellierStockGrade>();
			}
		}
		
		public System.Data.Linq.Table<FoolSecurityRate> FoolSecurityRates
		{
			get
			{
				return this.GetTable<FoolSecurityRate>();
			}
		}
		
		public System.Data.Linq.Table<PortfolioItem> PortfolioItems
		{
			get
			{
				return this.GetTable<PortfolioItem>();
			}
		}
		
		public System.Data.Linq.Table<Sector_Sector_Relation> Sector_Sector_Relations
		{
			get
			{
				return this.GetTable<Sector_Sector_Relation>();
			}
		}
		
		public System.Data.Linq.Table<Sector> Sectors
		{
			get
			{
				return this.GetTable<Sector>();
			}
		}
		
		public System.Data.Linq.Table<Company_Sector_Relation> Company_Sector_Relations
		{
			get
			{
				return this.GetTable<Company_Sector_Relation>();
			}
		}
		
		public System.Data.Linq.Table<StockSplitDividend> StockSplitDividends
		{
			get
			{
				return this.GetTable<StockSplitDividend>();
			}
		}
		
		public System.Data.Linq.Table<VectorVestSignal> VectorVestSignals
		{
			get
			{
				return this.GetTable<VectorVestSignal>();
			}
		}
		
		public System.Data.Linq.Table<StockOptionQuote> StockOptionQuotes
		{
			get
			{
				return this.GetTable<StockOptionQuote>();
			}
		}
		
		public System.Data.Linq.Table<StockOption> StockOptions
		{
			get
			{
				return this.GetTable<StockOption>();
			}
		}
		
		public System.Data.Linq.Table<TimingCubeMarketSignal> TimingCubeMarketSignals
		{
			get
			{
				return this.GetTable<TimingCubeMarketSignal>();
			}
		}
		
		public System.Data.Linq.Table<FinancialData> FinancialDatas
		{
			get
			{
				return this.GetTable<FinancialData>();
			}
		}
		
		public System.Data.Linq.Table<SeasonalEdge> SeasonalEdges
		{
			get
			{
				return this.GetTable<SeasonalEdge>();
			}
		}
		
		public System.Data.Linq.Table<StockScouterGroupFavor> StockScouterGroupFavors
		{
			get
			{
				return this.GetTable<StockScouterGroupFavor>();
			}
		}
		
		public System.Data.Linq.Table<FileSystemItem> FileSystemItems
		{
			get
			{
				return this.GetTable<FileSystemItem>();
			}
		}
		
		public System.Data.Linq.Table<FSPortfolio> FSPortfolios
		{
			get
			{
				return this.GetTable<FSPortfolio>();
			}
		}
		
		public System.Data.Linq.Table<StockScouterGrade> StockScouterGrades
		{
			get
			{
				return this.GetTable<StockScouterGrade>();
			}
		}
		
		public System.Data.Linq.Table<Company> Companies
		{
			get
			{
				return this.GetTable<Company>();
			}
		}
		
		public System.Data.Linq.Table<ChinaAnalystGrade> ChinaAnalystGrades
		{
			get
			{
				return this.GetTable<ChinaAnalystGrade>();
			}
		}
		
		public System.Data.Linq.Table<HistoricalDoubleItem> HistoricalDoubleItems
		{
			get
			{
				return this.GetTable<HistoricalDoubleItem>();
			}
		}
		
		public System.Data.Linq.Table<GeoInvestingGrade> GeoInvestingGrades
		{
			get
			{
				return this.GetTable<GeoInvestingGrade>();
			}
		}
		
		public System.Data.Linq.Table<StockQuote> StockQuotes
		{
			get
			{
				return this.GetTable<StockQuote>();
			}
		}
		
		public System.Data.Linq.Table<EarningsEstimate> EarningsEstimates
		{
			get
			{
				return this.GetTable<EarningsEstimate>();
			}
		}
		
		public System.Data.Linq.Table<QuickfolioItem> QuickfolioItems
		{
			get
			{
				return this.GetTable<QuickfolioItem>();
			}
		}
		
		public System.Data.Linq.Table<Currency> Currencies
		{
			get
			{
				return this.GetTable<Currency>();
			}
		}
		
		public System.Data.Linq.Table<HQUser> HQUsers
		{
			get
			{
				return this.GetTable<HQUser>();
			}
		}
		
		public System.Data.Linq.Table<HQUserGroup> HQUserGroups
		{
			get
			{
				return this.GetTable<HQUserGroup>();
			}
		}
		
		public System.Data.Linq.Table<HQUser_HQUserGroup_Relation> HQUser_HQUserGroup_Relations
		{
			get
			{
				return this.GetTable<HQUser_HQUserGroup_Relation>();
			}
		}
		
		public System.Data.Linq.Table<VectorVestMarketSignal> VectorVestMarketSignals
		{
			get
			{
				return this.GetTable<VectorVestMarketSignal>();
			}
		}
		
		public System.Data.Linq.Table<MarketHoliday> MarketHolidays
		{
			get
			{
				return this.GetTable<MarketHoliday>();
			}
		}
		
		public System.Data.Linq.Table<NewsItem> NewsItems
		{
			get
			{
				return this.GetTable<NewsItem>();
			}
		}
		
		public System.Data.Linq.Table<PowerEvent> PowerEvents
		{
			get
			{
				return this.GetTable<PowerEvent>();
			}
		}
		
		public System.Data.Linq.Table<Tag_PowerEvent_Relation> Tag_PowerEvent_Relations
		{
			get
			{
				return this.GetTable<Tag_PowerEvent_Relation>();
			}
		}
		
		public System.Data.Linq.Table<Tag> Tags
		{
			get
			{
				return this.GetTable<Tag>();
			}
		}
		
		public System.Data.Linq.Table<StockIndex> StockIndexes
		{
			get
			{
				return this.GetTable<StockIndex>();
			}
		}
		
		public System.Data.Linq.Table<StockIndexQuote> StockIndexQuotes
		{
			get
			{
				return this.GetTable<StockIndexQuote>();
			}
		}
		
		public System.Data.Linq.Table<FuturesQuote> FuturesQuotes
		{
			get
			{
				return this.GetTable<FuturesQuote>();
			}
		}
		
		public System.Data.Linq.Table<Future> Futures
		{
			get
			{
				return this.GetTable<Future>();
			}
		}
		
		public System.Data.Linq.Table<StockExchange> StockExchanges
		{
			get
			{
				return this.GetTable<StockExchange>();
			}
		}
		
		public System.Data.Linq.Table<Stock> Stocks
		{
			get
			{
				return this.GetTable<Stock>();
			}
		}
		
		public System.Data.Linq.Table<EarningsEventCalculatedIndicator> EarningsEventCalculatedIndicators
		{
			get
			{
				return this.GetTable<EarningsEventCalculatedIndicator>();
			}
		}
		
		public System.Data.Linq.Table<Ipo> Ipos
		{
			get
			{
				return this.GetTable<Ipo>();
			}
		}
		
		public System.Data.Linq.Table<IpoUnderwriter> IpoUnderwriters
		{
			get
			{
				return this.GetTable<IpoUnderwriter>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IbdGrade")]
	public partial class IbdGrade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _Type;
		
		private int _StockID;
		
		private System.DateTime _Date;
		
		private byte _Value;
		
		private EntityRef<Stock> _Stock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnValueChanging(byte value);
    partial void OnValueChanged();
    #endregion
		
		public IbdGrade()
		{
			this._Stock = default(EntityRef<Stock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="TinyInt NOT NULL")]
		public byte Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_IbdGrade", Storage="_Stock", ThisKey="StockID", OtherKey="ID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.IbdGrades.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.IbdGrades.Add(this);
						this._StockID = value.ID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ZacksGrade")]
	public partial class ZacksGrade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _Type;
		
		private int _StockID;
		
		private System.DateTime _Date;
		
		private byte _Value;
		
		private EntityRef<Stock> _Stock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnValueChanging(byte value);
    partial void OnValueChanged();
    #endregion
		
		public ZacksGrade()
		{
			this._Stock = default(EntityRef<Stock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="TinyInt NOT NULL")]
		public byte Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_ZacksGrade", Storage="_Stock", ThisKey="StockID", OtherKey="ID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.ZacksGrades.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.ZacksGrades.Add(this);
						this._StockID = value.ID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HistoricalStringItem")]
	public partial class HistoricalStringItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _TypeID;
		
		private int _SubTableID;
		
		private System.DateTime _Date;
		
		private string _StringData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(byte value);
    partial void OnTypeIDChanged();
    partial void OnSubTableIDChanging(int value);
    partial void OnSubTableIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnStringDataChanging(string value);
    partial void OnStringDataChanged();
    #endregion
		
		public HistoricalStringItem()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubTableID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubTableID
		{
			get
			{
				return this._SubTableID;
			}
			set
			{
				if ((this._SubTableID != value))
				{
					this.OnSubTableIDChanging(value);
					this.SendPropertyChanging();
					this._SubTableID = value;
					this.SendPropertyChanged("SubTableID");
					this.OnSubTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StringData", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string StringData
		{
			get
			{
				return this._StringData;
			}
			set
			{
				if ((this._StringData != value))
				{
					this.OnStringDataChanging(value);
					this.SendPropertyChanging();
					this._StringData = value;
					this.SendPropertyChanged("StringData");
					this.OnStringDataChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HistoricalIntItem")]
	public partial class HistoricalIntItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _TypeID;
		
		private int _SubTableID;
		
		private System.DateTime _Date;
		
		private int _IntData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(byte value);
    partial void OnTypeIDChanged();
    partial void OnSubTableIDChanging(int value);
    partial void OnSubTableIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnIntDataChanging(int value);
    partial void OnIntDataChanged();
    #endregion
		
		public HistoricalIntItem()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubTableID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubTableID
		{
			get
			{
				return this._SubTableID;
			}
			set
			{
				if ((this._SubTableID != value))
				{
					this.OnSubTableIDChanging(value);
					this.SendPropertyChanging();
					this._SubTableID = value;
					this.SendPropertyChanged("SubTableID");
					this.OnSubTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntData", DbType="Int NOT NULL")]
		public int IntData
		{
			get
			{
				return this._IntData;
			}
			set
			{
				if ((this._IntData != value))
				{
					this.OnIntDataChanging(value);
					this.SendPropertyChanging();
					this._IntData = value;
					this.SendPropertyChanged("IntData");
					this.OnIntDataChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NavellierStockGrade")]
	public partial class NavellierStockGrade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Date;
		
		private int _StockID;
		
		private char _Total;
		
		private char _ProprietaryQuantitative;
		
		private char _OverallFundamental;
		
		private char _SalesGrowth;
		
		private char _OperatingMarginGrowth;
		
		private char _EarningsGrowth;
		
		private char _EarningsRevisions;
		
		private char _EarningsSurprise;
		
		private char _EarningsMomentum;
		
		private char _ROE;
		
		private char _FreeCashFlow;
		
		private EntityRef<Stock> _Stock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnTotalChanging(char value);
    partial void OnTotalChanged();
    partial void OnProprietaryQuantitativeChanging(char value);
    partial void OnProprietaryQuantitativeChanged();
    partial void OnOverallFundamentalChanging(char value);
    partial void OnOverallFundamentalChanged();
    partial void OnSalesGrowthChanging(char value);
    partial void OnSalesGrowthChanged();
    partial void OnOperatingMarginGrowthChanging(char value);
    partial void OnOperatingMarginGrowthChanged();
    partial void OnEarningsGrowthChanging(char value);
    partial void OnEarningsGrowthChanged();
    partial void OnEarningsRevisionsChanging(char value);
    partial void OnEarningsRevisionsChanged();
    partial void OnEarningsSurpriseChanging(char value);
    partial void OnEarningsSurpriseChanged();
    partial void OnEarningsMomentumChanging(char value);
    partial void OnEarningsMomentumChanged();
    partial void OnROEChanging(char value);
    partial void OnROEChanged();
    partial void OnFreeCashFlowChanging(char value);
    partial void OnFreeCashFlowChanged();
    #endregion
		
		public NavellierStockGrade()
		{
			this._Stock = default(EntityRef<Stock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Total", DbType="Char(1) NOT NULL")]
		public char Total
		{
			get
			{
				return this._Total;
			}
			set
			{
				if ((this._Total != value))
				{
					this.OnTotalChanging(value);
					this.SendPropertyChanging();
					this._Total = value;
					this.SendPropertyChanged("Total");
					this.OnTotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProprietaryQuantitative", DbType="Char(1) NOT NULL")]
		public char ProprietaryQuantitative
		{
			get
			{
				return this._ProprietaryQuantitative;
			}
			set
			{
				if ((this._ProprietaryQuantitative != value))
				{
					this.OnProprietaryQuantitativeChanging(value);
					this.SendPropertyChanging();
					this._ProprietaryQuantitative = value;
					this.SendPropertyChanged("ProprietaryQuantitative");
					this.OnProprietaryQuantitativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OverallFundamental", DbType="Char(1) NOT NULL")]
		public char OverallFundamental
		{
			get
			{
				return this._OverallFundamental;
			}
			set
			{
				if ((this._OverallFundamental != value))
				{
					this.OnOverallFundamentalChanging(value);
					this.SendPropertyChanging();
					this._OverallFundamental = value;
					this.SendPropertyChanged("OverallFundamental");
					this.OnOverallFundamentalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalesGrowth", DbType="Char(1) NOT NULL")]
		public char SalesGrowth
		{
			get
			{
				return this._SalesGrowth;
			}
			set
			{
				if ((this._SalesGrowth != value))
				{
					this.OnSalesGrowthChanging(value);
					this.SendPropertyChanging();
					this._SalesGrowth = value;
					this.SendPropertyChanged("SalesGrowth");
					this.OnSalesGrowthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperatingMarginGrowth", DbType="Char(1) NOT NULL")]
		public char OperatingMarginGrowth
		{
			get
			{
				return this._OperatingMarginGrowth;
			}
			set
			{
				if ((this._OperatingMarginGrowth != value))
				{
					this.OnOperatingMarginGrowthChanging(value);
					this.SendPropertyChanging();
					this._OperatingMarginGrowth = value;
					this.SendPropertyChanged("OperatingMarginGrowth");
					this.OnOperatingMarginGrowthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EarningsGrowth", DbType="Char(1) NOT NULL")]
		public char EarningsGrowth
		{
			get
			{
				return this._EarningsGrowth;
			}
			set
			{
				if ((this._EarningsGrowth != value))
				{
					this.OnEarningsGrowthChanging(value);
					this.SendPropertyChanging();
					this._EarningsGrowth = value;
					this.SendPropertyChanged("EarningsGrowth");
					this.OnEarningsGrowthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EarningsRevisions", DbType="Char(1) NOT NULL")]
		public char EarningsRevisions
		{
			get
			{
				return this._EarningsRevisions;
			}
			set
			{
				if ((this._EarningsRevisions != value))
				{
					this.OnEarningsRevisionsChanging(value);
					this.SendPropertyChanging();
					this._EarningsRevisions = value;
					this.SendPropertyChanged("EarningsRevisions");
					this.OnEarningsRevisionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EarningsSurprise", DbType="Char(1) NOT NULL")]
		public char EarningsSurprise
		{
			get
			{
				return this._EarningsSurprise;
			}
			set
			{
				if ((this._EarningsSurprise != value))
				{
					this.OnEarningsSurpriseChanging(value);
					this.SendPropertyChanging();
					this._EarningsSurprise = value;
					this.SendPropertyChanged("EarningsSurprise");
					this.OnEarningsSurpriseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EarningsMomentum", DbType="Char(1) NOT NULL")]
		public char EarningsMomentum
		{
			get
			{
				return this._EarningsMomentum;
			}
			set
			{
				if ((this._EarningsMomentum != value))
				{
					this.OnEarningsMomentumChanging(value);
					this.SendPropertyChanging();
					this._EarningsMomentum = value;
					this.SendPropertyChanged("EarningsMomentum");
					this.OnEarningsMomentumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ROE", DbType="Char(1) NOT NULL")]
		public char ROE
		{
			get
			{
				return this._ROE;
			}
			set
			{
				if ((this._ROE != value))
				{
					this.OnROEChanging(value);
					this.SendPropertyChanging();
					this._ROE = value;
					this.SendPropertyChanged("ROE");
					this.OnROEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreeCashFlow", DbType="Char(1) NOT NULL")]
		public char FreeCashFlow
		{
			get
			{
				return this._FreeCashFlow;
			}
			set
			{
				if ((this._FreeCashFlow != value))
				{
					this.OnFreeCashFlowChanging(value);
					this.SendPropertyChanging();
					this._FreeCashFlow = value;
					this.SendPropertyChanged("FreeCashFlow");
					this.OnFreeCashFlowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_NavellierStockGrade", Storage="_Stock", ThisKey="StockID", OtherKey="ID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.NavellierStockGrades.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.NavellierStockGrades.Add(this);
						this._StockID = value.ID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FoolSecurityRate")]
	public partial class FoolSecurityRate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockID;
		
		private System.DateTime _Date;
		
		private System.Nullable<byte> _Rate;
		
		private System.Nullable<int> _Bulls;
		
		private System.Nullable<int> _Bears;
		
		private EntityRef<Stock> _Stock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnRateChanging(System.Nullable<byte> value);
    partial void OnRateChanged();
    partial void OnBullsChanging(System.Nullable<int> value);
    partial void OnBullsChanged();
    partial void OnBearsChanging(System.Nullable<int> value);
    partial void OnBearsChanged();
    #endregion
		
		public FoolSecurityRate()
		{
			this._Stock = default(EntityRef<Stock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rate", DbType="TinyInt")]
		public System.Nullable<byte> Rate
		{
			get
			{
				return this._Rate;
			}
			set
			{
				if ((this._Rate != value))
				{
					this.OnRateChanging(value);
					this.SendPropertyChanging();
					this._Rate = value;
					this.SendPropertyChanged("Rate");
					this.OnRateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bulls", DbType="Int")]
		public System.Nullable<int> Bulls
		{
			get
			{
				return this._Bulls;
			}
			set
			{
				if ((this._Bulls != value))
				{
					this.OnBullsChanging(value);
					this.SendPropertyChanging();
					this._Bulls = value;
					this.SendPropertyChanged("Bulls");
					this.OnBullsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bears", DbType="Int")]
		public System.Nullable<int> Bears
		{
			get
			{
				return this._Bears;
			}
			set
			{
				if ((this._Bears != value))
				{
					this.OnBearsChanging(value);
					this.SendPropertyChanging();
					this._Bears = value;
					this.SendPropertyChanged("Bears");
					this.OnBearsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_FoolSecurityRate", Storage="_Stock", ThisKey="StockID", OtherKey="ID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.FoolSecurityRates.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.FoolSecurityRates.Add(this);
						this._StockID = value.ID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PortfolioItem")]
	public partial class PortfolioItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _PortfolioID;
		
		private System.Nullable<byte> _TransactionType;
		
		private byte _AssetTypeID;
		
		private int _AssetSubTableID;
		
		private System.Nullable<int> _Volume;
		
		private System.Nullable<float> _Price;
		
		private System.DateTime _Date;
		
		private string _Note;
		
		private EntityRef<FSPortfolio> _FSPortfolio;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPortfolioIDChanging(int value);
    partial void OnPortfolioIDChanged();
    partial void OnTransactionTypeChanging(System.Nullable<byte> value);
    partial void OnTransactionTypeChanged();
    partial void OnAssetTypeIDChanging(byte value);
    partial void OnAssetTypeIDChanged();
    partial void OnAssetSubTableIDChanging(int value);
    partial void OnAssetSubTableIDChanged();
    partial void OnVolumeChanging(System.Nullable<int> value);
    partial void OnVolumeChanged();
    partial void OnPriceChanging(System.Nullable<float> value);
    partial void OnPriceChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public PortfolioItem()
		{
			this._FSPortfolio = default(EntityRef<FSPortfolio>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PortfolioID", DbType="Int NOT NULL")]
		public int PortfolioID
		{
			get
			{
				return this._PortfolioID;
			}
			set
			{
				if ((this._PortfolioID != value))
				{
					if (this._FSPortfolio.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPortfolioIDChanging(value);
					this.SendPropertyChanging();
					this._PortfolioID = value;
					this.SendPropertyChanged("PortfolioID");
					this.OnPortfolioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionType", DbType="TinyInt")]
		public System.Nullable<byte> TransactionType
		{
			get
			{
				return this._TransactionType;
			}
			set
			{
				if ((this._TransactionType != value))
				{
					this.OnTransactionTypeChanging(value);
					this.SendPropertyChanging();
					this._TransactionType = value;
					this.SendPropertyChanged("TransactionType");
					this.OnTransactionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetTypeID", DbType="TinyInt NOT NULL")]
		public byte AssetTypeID
		{
			get
			{
				return this._AssetTypeID;
			}
			set
			{
				if ((this._AssetTypeID != value))
				{
					this.OnAssetTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AssetTypeID = value;
					this.SendPropertyChanged("AssetTypeID");
					this.OnAssetTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetSubTableID", DbType="Int NOT NULL")]
		public int AssetSubTableID
		{
			get
			{
				return this._AssetSubTableID;
			}
			set
			{
				if ((this._AssetSubTableID != value))
				{
					this.OnAssetSubTableIDChanging(value);
					this.SendPropertyChanging();
					this._AssetSubTableID = value;
					this.SendPropertyChanged("AssetSubTableID");
					this.OnAssetSubTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Int")]
		public System.Nullable<int> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Real")]
		public System.Nullable<float> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(1024)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FSPortfolio_PortfolioItem", Storage="_FSPortfolio", ThisKey="PortfolioID", OtherKey="FileSystemItemID", IsForeignKey=true)]
		public FSPortfolio FSPortfolio
		{
			get
			{
				return this._FSPortfolio.Entity;
			}
			set
			{
				FSPortfolio previousValue = this._FSPortfolio.Entity;
				if (((previousValue != value) 
							|| (this._FSPortfolio.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FSPortfolio.Entity = null;
						previousValue.PortfolioItems.Remove(this);
					}
					this._FSPortfolio.Entity = value;
					if ((value != null))
					{
						value.PortfolioItems.Add(this);
						this._PortfolioID = value.FileSystemItemID;
					}
					else
					{
						this._PortfolioID = default(int);
					}
					this.SendPropertyChanged("FSPortfolio");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sector_Sector_Relation")]
	public partial class Sector_Sector_Relation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SectorID1;
		
		private int _SectorID2;
		
		private EntityRef<Sector> _Sector;
		
		private EntityRef<Sector> _Sector1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSectorID1Changing(int value);
    partial void OnSectorID1Changed();
    partial void OnSectorID2Changing(int value);
    partial void OnSectorID2Changed();
    #endregion
		
		public Sector_Sector_Relation()
		{
			this._Sector = default(EntityRef<Sector>);
			this._Sector1 = default(EntityRef<Sector>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectorID1", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SectorID1
		{
			get
			{
				return this._SectorID1;
			}
			set
			{
				if ((this._SectorID1 != value))
				{
					if (this._Sector.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectorID1Changing(value);
					this.SendPropertyChanging();
					this._SectorID1 = value;
					this.SendPropertyChanged("SectorID1");
					this.OnSectorID1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectorID2", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SectorID2
		{
			get
			{
				return this._SectorID2;
			}
			set
			{
				if ((this._SectorID2 != value))
				{
					if (this._Sector1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectorID2Changing(value);
					this.SendPropertyChanging();
					this._SectorID2 = value;
					this.SendPropertyChanged("SectorID2");
					this.OnSectorID2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sector_Sector_Sector_Relation", Storage="_Sector", ThisKey="SectorID1", OtherKey="ID", IsForeignKey=true)]
		public Sector Sector
		{
			get
			{
				return this._Sector.Entity;
			}
			set
			{
				Sector previousValue = this._Sector.Entity;
				if (((previousValue != value) 
							|| (this._Sector.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sector.Entity = null;
						previousValue.Sector_Sector_Relations.Remove(this);
					}
					this._Sector.Entity = value;
					if ((value != null))
					{
						value.Sector_Sector_Relations.Add(this);
						this._SectorID1 = value.ID;
					}
					else
					{
						this._SectorID1 = default(int);
					}
					this.SendPropertyChanged("Sector");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sector_Sector_Sector_Relation1", Storage="_Sector1", ThisKey="SectorID2", OtherKey="ID", IsForeignKey=true)]
		public Sector Sector1
		{
			get
			{
				return this._Sector1.Entity;
			}
			set
			{
				Sector previousValue = this._Sector1.Entity;
				if (((previousValue != value) 
							|| (this._Sector1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sector1.Entity = null;
						previousValue.Sector_Sector_Relations1.Remove(this);
					}
					this._Sector1.Entity = value;
					if ((value != null))
					{
						value.Sector_Sector_Relations1.Add(this);
						this._SectorID2 = value.ID;
					}
					else
					{
						this._SectorID2 = default(int);
					}
					this.SendPropertyChanged("Sector1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sector")]
	public partial class Sector : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private byte _Type;
		
		private EntitySet<Sector_Sector_Relation> _Sector_Sector_Relations;
		
		private EntitySet<Sector_Sector_Relation> _Sector_Sector_Relations1;
		
		private EntitySet<Company_Sector_Relation> _Company_Sector_Relations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    #endregion
		
		public Sector()
		{
			this._Sector_Sector_Relations = new EntitySet<Sector_Sector_Relation>(new Action<Sector_Sector_Relation>(this.attach_Sector_Sector_Relations), new Action<Sector_Sector_Relation>(this.detach_Sector_Sector_Relations));
			this._Sector_Sector_Relations1 = new EntitySet<Sector_Sector_Relation>(new Action<Sector_Sector_Relation>(this.attach_Sector_Sector_Relations1), new Action<Sector_Sector_Relation>(this.detach_Sector_Sector_Relations1));
			this._Company_Sector_Relations = new EntitySet<Company_Sector_Relation>(new Action<Company_Sector_Relation>(this.attach_Company_Sector_Relations), new Action<Company_Sector_Relation>(this.detach_Company_Sector_Relations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL")]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sector_Sector_Sector_Relation", Storage="_Sector_Sector_Relations", ThisKey="ID", OtherKey="SectorID1")]
		public EntitySet<Sector_Sector_Relation> Sector_Sector_Relations
		{
			get
			{
				return this._Sector_Sector_Relations;
			}
			set
			{
				this._Sector_Sector_Relations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sector_Sector_Sector_Relation1", Storage="_Sector_Sector_Relations1", ThisKey="ID", OtherKey="SectorID2")]
		public EntitySet<Sector_Sector_Relation> Sector_Sector_Relations1
		{
			get
			{
				return this._Sector_Sector_Relations1;
			}
			set
			{
				this._Sector_Sector_Relations1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sector_Company_Sector_Relation", Storage="_Company_Sector_Relations", ThisKey="ID", OtherKey="SectorID")]
		public EntitySet<Company_Sector_Relation> Company_Sector_Relations
		{
			get
			{
				return this._Company_Sector_Relations;
			}
			set
			{
				this._Company_Sector_Relations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Sector_Sector_Relations(Sector_Sector_Relation entity)
		{
			this.SendPropertyChanging();
			entity.Sector = this;
		}
		
		private void detach_Sector_Sector_Relations(Sector_Sector_Relation entity)
		{
			this.SendPropertyChanging();
			entity.Sector = null;
		}
		
		private void attach_Sector_Sector_Relations1(Sector_Sector_Relation entity)
		{
			this.SendPropertyChanging();
			entity.Sector1 = this;
		}
		
		private void detach_Sector_Sector_Relations1(Sector_Sector_Relation entity)
		{
			this.SendPropertyChanging();
			entity.Sector1 = null;
		}
		
		private void attach_Company_Sector_Relations(Company_Sector_Relation entity)
		{
			this.SendPropertyChanging();
			entity.Sector = this;
		}
		
		private void detach_Company_Sector_Relations(Company_Sector_Relation entity)
		{
			this.SendPropertyChanging();
			entity.Sector = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company_Sector_Relation")]
	public partial class Company_Sector_Relation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CompanyID;
		
		private int _SectorID;
		
		private EntityRef<Sector> _Sector;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnSectorIDChanging(int value);
    partial void OnSectorIDChanged();
    #endregion
		
		public Company_Sector_Relation()
		{
			this._Sector = default(EntityRef<Sector>);
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SectorID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SectorID
		{
			get
			{
				return this._SectorID;
			}
			set
			{
				if ((this._SectorID != value))
				{
					if (this._Sector.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSectorIDChanging(value);
					this.SendPropertyChanging();
					this._SectorID = value;
					this.SendPropertyChanged("SectorID");
					this.OnSectorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sector_Company_Sector_Relation", Storage="_Sector", ThisKey="SectorID", OtherKey="ID", IsForeignKey=true)]
		public Sector Sector
		{
			get
			{
				return this._Sector.Entity;
			}
			set
			{
				Sector previousValue = this._Sector.Entity;
				if (((previousValue != value) 
							|| (this._Sector.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sector.Entity = null;
						previousValue.Company_Sector_Relations.Remove(this);
					}
					this._Sector.Entity = value;
					if ((value != null))
					{
						value.Company_Sector_Relations.Add(this);
						this._SectorID = value.ID;
					}
					else
					{
						this._SectorID = default(int);
					}
					this.SendPropertyChanged("Sector");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Company_Sector_Relation", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Company_Sector_Relations.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Company_Sector_Relations.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockSplitDividend")]
	public partial class StockSplitDividend : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockID;
		
		private System.DateTime _Date;
		
		private bool _IsSplit;
		
		private float _DividendOrPrevClosePrice;
		
		private System.Nullable<short> _OldVolume;
		
		private System.Nullable<short> _NewVolume;
		
		private EntityRef<Stock> _Stock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnIsSplitChanging(bool value);
    partial void OnIsSplitChanged();
    partial void OnDividendOrPrevClosePriceChanging(float value);
    partial void OnDividendOrPrevClosePriceChanged();
    partial void OnOldVolumeChanging(System.Nullable<short> value);
    partial void OnOldVolumeChanged();
    partial void OnNewVolumeChanging(System.Nullable<short> value);
    partial void OnNewVolumeChanged();
    #endregion
		
		public StockSplitDividend()
		{
			this._Stock = default(EntityRef<Stock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSplit", DbType="Bit NOT NULL", IsPrimaryKey=true)]
		public bool IsSplit
		{
			get
			{
				return this._IsSplit;
			}
			set
			{
				if ((this._IsSplit != value))
				{
					this.OnIsSplitChanging(value);
					this.SendPropertyChanging();
					this._IsSplit = value;
					this.SendPropertyChanged("IsSplit");
					this.OnIsSplitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DividendOrPrevClosePrice", DbType="Real NOT NULL")]
		public float DividendOrPrevClosePrice
		{
			get
			{
				return this._DividendOrPrevClosePrice;
			}
			set
			{
				if ((this._DividendOrPrevClosePrice != value))
				{
					this.OnDividendOrPrevClosePriceChanging(value);
					this.SendPropertyChanging();
					this._DividendOrPrevClosePrice = value;
					this.SendPropertyChanged("DividendOrPrevClosePrice");
					this.OnDividendOrPrevClosePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OldVolume", DbType="SmallInt")]
		public System.Nullable<short> OldVolume
		{
			get
			{
				return this._OldVolume;
			}
			set
			{
				if ((this._OldVolume != value))
				{
					this.OnOldVolumeChanging(value);
					this.SendPropertyChanging();
					this._OldVolume = value;
					this.SendPropertyChanged("OldVolume");
					this.OnOldVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewVolume", DbType="SmallInt")]
		public System.Nullable<short> NewVolume
		{
			get
			{
				return this._NewVolume;
			}
			set
			{
				if ((this._NewVolume != value))
				{
					this.OnNewVolumeChanging(value);
					this.SendPropertyChanging();
					this._NewVolume = value;
					this.SendPropertyChanged("NewVolume");
					this.OnNewVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_StockSplitDividend", Storage="_Stock", ThisKey="StockID", OtherKey="ID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.StockSplitDividends.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.StockSplitDividends.Add(this);
						this._StockID = value.ID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VectorVestSignal")]
	public partial class VectorVestSignal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Date;
		
		private int _Buys;
		
		private int _Sells;
		
		private int _Holds;
		
		private double _VVCompositePrice;
		
		private double _VVCompositeRelativeTiming;
		
		private double _MarketTimingIndicator;
		
		private byte _ColorGuardVVCPrice;
		
		private byte _ColorGuardVVCRelativeTiming;
		
		private byte _ColorGuardBuySellRatio;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnBuysChanging(int value);
    partial void OnBuysChanged();
    partial void OnSellsChanging(int value);
    partial void OnSellsChanged();
    partial void OnHoldsChanging(int value);
    partial void OnHoldsChanged();
    partial void OnVVCompositePriceChanging(double value);
    partial void OnVVCompositePriceChanged();
    partial void OnVVCompositeRelativeTimingChanging(double value);
    partial void OnVVCompositeRelativeTimingChanged();
    partial void OnMarketTimingIndicatorChanging(double value);
    partial void OnMarketTimingIndicatorChanged();
    partial void OnColorGuardVVCPriceChanging(byte value);
    partial void OnColorGuardVVCPriceChanged();
    partial void OnColorGuardVVCRelativeTimingChanging(byte value);
    partial void OnColorGuardVVCRelativeTimingChanged();
    partial void OnColorGuardBuySellRatioChanging(byte value);
    partial void OnColorGuardBuySellRatioChanged();
    #endregion
		
		public VectorVestSignal()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Buys", DbType="Int NOT NULL")]
		public int Buys
		{
			get
			{
				return this._Buys;
			}
			set
			{
				if ((this._Buys != value))
				{
					this.OnBuysChanging(value);
					this.SendPropertyChanging();
					this._Buys = value;
					this.SendPropertyChanged("Buys");
					this.OnBuysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sells", DbType="Int NOT NULL")]
		public int Sells
		{
			get
			{
				return this._Sells;
			}
			set
			{
				if ((this._Sells != value))
				{
					this.OnSellsChanging(value);
					this.SendPropertyChanging();
					this._Sells = value;
					this.SendPropertyChanged("Sells");
					this.OnSellsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Holds", DbType="Int NOT NULL")]
		public int Holds
		{
			get
			{
				return this._Holds;
			}
			set
			{
				if ((this._Holds != value))
				{
					this.OnHoldsChanging(value);
					this.SendPropertyChanging();
					this._Holds = value;
					this.SendPropertyChanged("Holds");
					this.OnHoldsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VVCompositePrice", DbType="Float NOT NULL")]
		public double VVCompositePrice
		{
			get
			{
				return this._VVCompositePrice;
			}
			set
			{
				if ((this._VVCompositePrice != value))
				{
					this.OnVVCompositePriceChanging(value);
					this.SendPropertyChanging();
					this._VVCompositePrice = value;
					this.SendPropertyChanged("VVCompositePrice");
					this.OnVVCompositePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VVCompositeRelativeTiming", DbType="Float NOT NULL")]
		public double VVCompositeRelativeTiming
		{
			get
			{
				return this._VVCompositeRelativeTiming;
			}
			set
			{
				if ((this._VVCompositeRelativeTiming != value))
				{
					this.OnVVCompositeRelativeTimingChanging(value);
					this.SendPropertyChanging();
					this._VVCompositeRelativeTiming = value;
					this.SendPropertyChanged("VVCompositeRelativeTiming");
					this.OnVVCompositeRelativeTimingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketTimingIndicator", DbType="Float NOT NULL")]
		public double MarketTimingIndicator
		{
			get
			{
				return this._MarketTimingIndicator;
			}
			set
			{
				if ((this._MarketTimingIndicator != value))
				{
					this.OnMarketTimingIndicatorChanging(value);
					this.SendPropertyChanging();
					this._MarketTimingIndicator = value;
					this.SendPropertyChanged("MarketTimingIndicator");
					this.OnMarketTimingIndicatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorGuardVVCPrice", DbType="TinyInt NOT NULL")]
		public byte ColorGuardVVCPrice
		{
			get
			{
				return this._ColorGuardVVCPrice;
			}
			set
			{
				if ((this._ColorGuardVVCPrice != value))
				{
					this.OnColorGuardVVCPriceChanging(value);
					this.SendPropertyChanging();
					this._ColorGuardVVCPrice = value;
					this.SendPropertyChanged("ColorGuardVVCPrice");
					this.OnColorGuardVVCPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorGuardVVCRelativeTiming", DbType="TinyInt NOT NULL")]
		public byte ColorGuardVVCRelativeTiming
		{
			get
			{
				return this._ColorGuardVVCRelativeTiming;
			}
			set
			{
				if ((this._ColorGuardVVCRelativeTiming != value))
				{
					this.OnColorGuardVVCRelativeTimingChanging(value);
					this.SendPropertyChanging();
					this._ColorGuardVVCRelativeTiming = value;
					this.SendPropertyChanged("ColorGuardVVCRelativeTiming");
					this.OnColorGuardVVCRelativeTimingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColorGuardBuySellRatio", DbType="TinyInt NOT NULL")]
		public byte ColorGuardBuySellRatio
		{
			get
			{
				return this._ColorGuardBuySellRatio;
			}
			set
			{
				if ((this._ColorGuardBuySellRatio != value))
				{
					this.OnColorGuardBuySellRatioChanging(value);
					this.SendPropertyChanging();
					this._ColorGuardBuySellRatio = value;
					this.SendPropertyChanged("ColorGuardBuySellRatio");
					this.OnColorGuardBuySellRatioChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockOptionQuote")]
	public partial class StockOptionQuote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockOptionID;
		
		private System.DateTime _Date;
		
		private System.Nullable<float> _AskPrice;
		
		private System.Nullable<float> _BidPrice;
		
		private System.Nullable<float> _LastPrice;
		
		private System.Nullable<int> _Volume;
		
		private System.Nullable<int> _OpenInterest;
		
		private EntityRef<StockOption> _StockOption;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockOptionIDChanging(int value);
    partial void OnStockOptionIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnAskPriceChanging(System.Nullable<float> value);
    partial void OnAskPriceChanged();
    partial void OnBidPriceChanging(System.Nullable<float> value);
    partial void OnBidPriceChanged();
    partial void OnLastPriceChanging(System.Nullable<float> value);
    partial void OnLastPriceChanged();
    partial void OnVolumeChanging(System.Nullable<int> value);
    partial void OnVolumeChanged();
    partial void OnOpenInterestChanging(System.Nullable<int> value);
    partial void OnOpenInterestChanged();
    #endregion
		
		public StockOptionQuote()
		{
			this._StockOption = default(EntityRef<StockOption>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockOptionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StockOptionID
		{
			get
			{
				return this._StockOptionID;
			}
			set
			{
				if ((this._StockOptionID != value))
				{
					if (this._StockOption.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockOptionIDChanging(value);
					this.SendPropertyChanging();
					this._StockOptionID = value;
					this.SendPropertyChanged("StockOptionID");
					this.OnStockOptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AskPrice", DbType="Real")]
		public System.Nullable<float> AskPrice
		{
			get
			{
				return this._AskPrice;
			}
			set
			{
				if ((this._AskPrice != value))
				{
					this.OnAskPriceChanging(value);
					this.SendPropertyChanging();
					this._AskPrice = value;
					this.SendPropertyChanged("AskPrice");
					this.OnAskPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BidPrice", DbType="Real")]
		public System.Nullable<float> BidPrice
		{
			get
			{
				return this._BidPrice;
			}
			set
			{
				if ((this._BidPrice != value))
				{
					this.OnBidPriceChanging(value);
					this.SendPropertyChanging();
					this._BidPrice = value;
					this.SendPropertyChanged("BidPrice");
					this.OnBidPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastPrice", DbType="Real")]
		public System.Nullable<float> LastPrice
		{
			get
			{
				return this._LastPrice;
			}
			set
			{
				if ((this._LastPrice != value))
				{
					this.OnLastPriceChanging(value);
					this.SendPropertyChanging();
					this._LastPrice = value;
					this.SendPropertyChanged("LastPrice");
					this.OnLastPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Int")]
		public System.Nullable<int> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenInterest", DbType="Int")]
		public System.Nullable<int> OpenInterest
		{
			get
			{
				return this._OpenInterest;
			}
			set
			{
				if ((this._OpenInterest != value))
				{
					this.OnOpenInterestChanging(value);
					this.SendPropertyChanging();
					this._OpenInterest = value;
					this.SendPropertyChanged("OpenInterest");
					this.OnOpenInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockOption_StockOptionQuote", Storage="_StockOption", ThisKey="StockOptionID", OtherKey="ID", IsForeignKey=true)]
		public StockOption StockOption
		{
			get
			{
				return this._StockOption.Entity;
			}
			set
			{
				StockOption previousValue = this._StockOption.Entity;
				if (((previousValue != value) 
							|| (this._StockOption.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StockOption.Entity = null;
						previousValue.StockOptionQuotes.Remove(this);
					}
					this._StockOption.Entity = value;
					if ((value != null))
					{
						value.StockOptionQuotes.Add(this);
						this._StockOptionID = value.ID;
					}
					else
					{
						this._StockOptionID = default(int);
					}
					this.SendPropertyChanged("StockOption");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockOption")]
	public partial class StockOption : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UnderlyingStockID;
		
		private byte _Flags;
		
		private System.DateTime _ExpirationDate;
		
		private float _StrikePrice;
		
		private EntitySet<StockOptionQuote> _StockOptionQuotes;
		
		private EntityRef<Stock> _Stock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUnderlyingStockIDChanging(int value);
    partial void OnUnderlyingStockIDChanged();
    partial void OnFlagsChanging(byte value);
    partial void OnFlagsChanged();
    partial void OnExpirationDateChanging(System.DateTime value);
    partial void OnExpirationDateChanged();
    partial void OnStrikePriceChanging(float value);
    partial void OnStrikePriceChanged();
    #endregion
		
		public StockOption()
		{
			this._StockOptionQuotes = new EntitySet<StockOptionQuote>(new Action<StockOptionQuote>(this.attach_StockOptionQuotes), new Action<StockOptionQuote>(this.detach_StockOptionQuotes));
			this._Stock = default(EntityRef<Stock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnderlyingStockID", DbType="Int NOT NULL")]
		public int UnderlyingStockID
		{
			get
			{
				return this._UnderlyingStockID;
			}
			set
			{
				if ((this._UnderlyingStockID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnderlyingStockIDChanging(value);
					this.SendPropertyChanging();
					this._UnderlyingStockID = value;
					this.SendPropertyChanged("UnderlyingStockID");
					this.OnUnderlyingStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flags", DbType="TinyInt NOT NULL")]
		public byte Flags
		{
			get
			{
				return this._Flags;
			}
			set
			{
				if ((this._Flags != value))
				{
					this.OnFlagsChanging(value);
					this.SendPropertyChanging();
					this._Flags = value;
					this.SendPropertyChanged("Flags");
					this.OnFlagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StrikePrice", DbType="Real NOT NULL")]
		public float StrikePrice
		{
			get
			{
				return this._StrikePrice;
			}
			set
			{
				if ((this._StrikePrice != value))
				{
					this.OnStrikePriceChanging(value);
					this.SendPropertyChanging();
					this._StrikePrice = value;
					this.SendPropertyChanged("StrikePrice");
					this.OnStrikePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockOption_StockOptionQuote", Storage="_StockOptionQuotes", ThisKey="ID", OtherKey="StockOptionID")]
		public EntitySet<StockOptionQuote> StockOptionQuotes
		{
			get
			{
				return this._StockOptionQuotes;
			}
			set
			{
				this._StockOptionQuotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_StockOption", Storage="_Stock", ThisKey="UnderlyingStockID", OtherKey="ID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.StockOptions.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.StockOptions.Add(this);
						this._UnderlyingStockID = value.ID;
					}
					else
					{
						this._UnderlyingStockID = default(int);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StockOptionQuotes(StockOptionQuote entity)
		{
			this.SendPropertyChanging();
			entity.StockOption = this;
		}
		
		private void detach_StockOptionQuotes(StockOptionQuote entity)
		{
			this.SendPropertyChanging();
			entity.StockOption = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimingCubeMarketSignal")]
	public partial class TimingCubeMarketSignal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Date;
		
		private byte _Signal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnSignalChanging(byte value);
    partial void OnSignalChanged();
    #endregion
		
		public TimingCubeMarketSignal()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Signal", DbType="TinyInt NOT NULL")]
		public byte Signal
		{
			get
			{
				return this._Signal;
			}
			set
			{
				if ((this._Signal != value))
				{
					this.OnSignalChanging(value);
					this.SendPropertyChanging();
					this._Signal = value;
					this.SendPropertyChanged("Signal");
					this.OnSignalChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FinancialData")]
	public partial class FinancialData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _TypeID;
		
		private int _CompanyID;
		
		private System.DateTime _Date;
		
		private short _PeriodDays;
		
		private byte _CurrencyID;
		
		private float _Value;
		
		private EntityRef<Company> _Company;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(byte value);
    partial void OnTypeIDChanged();
    partial void OnCompanyIDChanging(int value);
    partial void OnCompanyIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnPeriodDaysChanging(short value);
    partial void OnPeriodDaysChanged();
    partial void OnCurrencyIDChanging(byte value);
    partial void OnCurrencyIDChanged();
    partial void OnValueChanging(float value);
    partial void OnValueChanged();
    #endregion
		
		public FinancialData()
		{
			this._Company = default(EntityRef<Company>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PeriodDays", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short PeriodDays
		{
			get
			{
				return this._PeriodDays;
			}
			set
			{
				if ((this._PeriodDays != value))
				{
					this.OnPeriodDaysChanging(value);
					this.SendPropertyChanging();
					this._PeriodDays = value;
					this.SendPropertyChanged("PeriodDays");
					this.OnPeriodDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="TinyInt NOT NULL")]
		public byte CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Real NOT NULL")]
		public float Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_FinancialData", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.FinancialDatas.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.FinancialDatas.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(int);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SeasonalEdge")]
	public partial class SeasonalEdge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockID;
		
		private System.DateTime _Date;
		
		private short _EdgeTradingDays;
		
		private byte _EdgeIndex;
		
		private float _EdgePeak;
		
		private float _EdgeSum;
		
		private float _PercentReturn;
		
		private byte _UsdVolumePercentileGrade;
		
		private byte _TotalOccurences;
		
		private byte _EdgeOccurences;
		
		private EntityRef<Stock> _Stock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnEdgeTradingDaysChanging(short value);
    partial void OnEdgeTradingDaysChanged();
    partial void OnEdgeIndexChanging(byte value);
    partial void OnEdgeIndexChanged();
    partial void OnEdgePeakChanging(float value);
    partial void OnEdgePeakChanged();
    partial void OnEdgeSumChanging(float value);
    partial void OnEdgeSumChanged();
    partial void OnPercentReturnChanging(float value);
    partial void OnPercentReturnChanged();
    partial void OnUsdVolumePercentileGradeChanging(byte value);
    partial void OnUsdVolumePercentileGradeChanged();
    partial void OnTotalOccurencesChanging(byte value);
    partial void OnTotalOccurencesChanged();
    partial void OnEdgeOccurencesChanging(byte value);
    partial void OnEdgeOccurencesChanged();
    #endregion
		
		public SeasonalEdge()
		{
			this._Stock = default(EntityRef<Stock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EdgeTradingDays", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short EdgeTradingDays
		{
			get
			{
				return this._EdgeTradingDays;
			}
			set
			{
				if ((this._EdgeTradingDays != value))
				{
					this.OnEdgeTradingDaysChanging(value);
					this.SendPropertyChanging();
					this._EdgeTradingDays = value;
					this.SendPropertyChanged("EdgeTradingDays");
					this.OnEdgeTradingDaysChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EdgeIndex", DbType="TinyInt NOT NULL")]
		public byte EdgeIndex
		{
			get
			{
				return this._EdgeIndex;
			}
			set
			{
				if ((this._EdgeIndex != value))
				{
					this.OnEdgeIndexChanging(value);
					this.SendPropertyChanging();
					this._EdgeIndex = value;
					this.SendPropertyChanged("EdgeIndex");
					this.OnEdgeIndexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EdgePeak", DbType="Real NOT NULL")]
		public float EdgePeak
		{
			get
			{
				return this._EdgePeak;
			}
			set
			{
				if ((this._EdgePeak != value))
				{
					this.OnEdgePeakChanging(value);
					this.SendPropertyChanging();
					this._EdgePeak = value;
					this.SendPropertyChanged("EdgePeak");
					this.OnEdgePeakChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EdgeSum", DbType="Real NOT NULL")]
		public float EdgeSum
		{
			get
			{
				return this._EdgeSum;
			}
			set
			{
				if ((this._EdgeSum != value))
				{
					this.OnEdgeSumChanging(value);
					this.SendPropertyChanging();
					this._EdgeSum = value;
					this.SendPropertyChanged("EdgeSum");
					this.OnEdgeSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PercentReturn", DbType="Real NOT NULL")]
		public float PercentReturn
		{
			get
			{
				return this._PercentReturn;
			}
			set
			{
				if ((this._PercentReturn != value))
				{
					this.OnPercentReturnChanging(value);
					this.SendPropertyChanging();
					this._PercentReturn = value;
					this.SendPropertyChanged("PercentReturn");
					this.OnPercentReturnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UsdVolumePercentileGrade", DbType="TinyInt NOT NULL")]
		public byte UsdVolumePercentileGrade
		{
			get
			{
				return this._UsdVolumePercentileGrade;
			}
			set
			{
				if ((this._UsdVolumePercentileGrade != value))
				{
					this.OnUsdVolumePercentileGradeChanging(value);
					this.SendPropertyChanging();
					this._UsdVolumePercentileGrade = value;
					this.SendPropertyChanged("UsdVolumePercentileGrade");
					this.OnUsdVolumePercentileGradeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalOccurences", DbType="TinyInt NOT NULL")]
		public byte TotalOccurences
		{
			get
			{
				return this._TotalOccurences;
			}
			set
			{
				if ((this._TotalOccurences != value))
				{
					this.OnTotalOccurencesChanging(value);
					this.SendPropertyChanging();
					this._TotalOccurences = value;
					this.SendPropertyChanged("TotalOccurences");
					this.OnTotalOccurencesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EdgeOccurences", DbType="TinyInt NOT NULL")]
		public byte EdgeOccurences
		{
			get
			{
				return this._EdgeOccurences;
			}
			set
			{
				if ((this._EdgeOccurences != value))
				{
					this.OnEdgeOccurencesChanging(value);
					this.SendPropertyChanging();
					this._EdgeOccurences = value;
					this.SendPropertyChanged("EdgeOccurences");
					this.OnEdgeOccurencesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_SeasonalEdge", Storage="_Stock", ThisKey="StockID", OtherKey="ID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.SeasonalEdges.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.SeasonalEdges.Add(this);
						this._StockID = value.ID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockScouterGroupFavor")]
	public partial class StockScouterGroupFavor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _GroupID;
		
		private System.DateTime _Date;
		
		private byte _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupIDChanging(byte value);
    partial void OnGroupIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnValueChanging(byte value);
    partial void OnValueChanged();
    #endregion
		
		public StockScouterGroupFavor()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte GroupID
		{
			get
			{
				return this._GroupID;
			}
			set
			{
				if ((this._GroupID != value))
				{
					this.OnGroupIDChanging(value);
					this.SendPropertyChanging();
					this._GroupID = value;
					this.SendPropertyChanged("GroupID");
					this.OnGroupIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="TinyInt NOT NULL")]
		public byte Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FileSystemItem")]
	public partial class FileSystemItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _UserID;
		
		private byte _TypeID;
		
		private int _ParentFolderID;
		
		private System.DateTime _LastWriteTime;
		
		private string _Note;
		
		private EntitySet<QuickfolioItem> _QuickfolioItems;
		
		private EntityRef<HQUser> _HQUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTypeIDChanging(byte value);
    partial void OnTypeIDChanged();
    partial void OnParentFolderIDChanging(int value);
    partial void OnParentFolderIDChanged();
    partial void OnLastWriteTimeChanging(System.DateTime value);
    partial void OnLastWriteTimeChanged();
    partial void OnNoteChanging(string value);
    partial void OnNoteChanged();
    #endregion
		
		public FileSystemItem()
		{
			this._QuickfolioItems = new EntitySet<QuickfolioItem>(new Action<QuickfolioItem>(this.attach_QuickfolioItems), new Action<QuickfolioItem>(this.detach_QuickfolioItems));
			this._HQUser = default(EntityRef<HQUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(1024) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._HQUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="TinyInt NOT NULL")]
		public byte TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentFolderID", DbType="Int NOT NULL")]
		public int ParentFolderID
		{
			get
			{
				return this._ParentFolderID;
			}
			set
			{
				if ((this._ParentFolderID != value))
				{
					this.OnParentFolderIDChanging(value);
					this.SendPropertyChanging();
					this._ParentFolderID = value;
					this.SendPropertyChanged("ParentFolderID");
					this.OnParentFolderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastWriteTime", DbType="DateTime NOT NULL")]
		public System.DateTime LastWriteTime
		{
			get
			{
				return this._LastWriteTime;
			}
			set
			{
				if ((this._LastWriteTime != value))
				{
					this.OnLastWriteTimeChanging(value);
					this.SendPropertyChanging();
					this._LastWriteTime = value;
					this.SendPropertyChanged("LastWriteTime");
					this.OnLastWriteTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Note", DbType="VarChar(1024)")]
		public string Note
		{
			get
			{
				return this._Note;
			}
			set
			{
				if ((this._Note != value))
				{
					this.OnNoteChanging(value);
					this.SendPropertyChanging();
					this._Note = value;
					this.SendPropertyChanged("Note");
					this.OnNoteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileSystemItem_QuickfolioItem", Storage="_QuickfolioItems", ThisKey="ID", OtherKey="QuickfolioID")]
		public EntitySet<QuickfolioItem> QuickfolioItems
		{
			get
			{
				return this._QuickfolioItems;
			}
			set
			{
				this._QuickfolioItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HQUser_FileSystemItem", Storage="_HQUser", ThisKey="UserID", OtherKey="ID", IsForeignKey=true)]
		public HQUser HQUser
		{
			get
			{
				return this._HQUser.Entity;
			}
			set
			{
				HQUser previousValue = this._HQUser.Entity;
				if (((previousValue != value) 
							|| (this._HQUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._HQUser.Entity = null;
						previousValue.FileSystemItems.Remove(this);
					}
					this._HQUser.Entity = value;
					if ((value != null))
					{
						value.FileSystemItems.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("HQUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QuickfolioItems(QuickfolioItem entity)
		{
			this.SendPropertyChanging();
			entity.FileSystemItem = this;
		}
		
		private void detach_QuickfolioItems(QuickfolioItem entity)
		{
			this.SendPropertyChanging();
			entity.FileSystemItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FSPortfolio")]
	public partial class FSPortfolio : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FileSystemItemID;
		
		private byte _Flags;
		
		private EntitySet<PortfolioItem> _PortfolioItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileSystemItemIDChanging(int value);
    partial void OnFileSystemItemIDChanged();
    partial void OnFlagsChanging(byte value);
    partial void OnFlagsChanged();
    #endregion
		
		public FSPortfolio()
		{
			this._PortfolioItems = new EntitySet<PortfolioItem>(new Action<PortfolioItem>(this.attach_PortfolioItems), new Action<PortfolioItem>(this.detach_PortfolioItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileSystemItemID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FileSystemItemID
		{
			get
			{
				return this._FileSystemItemID;
			}
			set
			{
				if ((this._FileSystemItemID != value))
				{
					this.OnFileSystemItemIDChanging(value);
					this.SendPropertyChanging();
					this._FileSystemItemID = value;
					this.SendPropertyChanged("FileSystemItemID");
					this.OnFileSystemItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flags", DbType="TinyInt NOT NULL")]
		public byte Flags
		{
			get
			{
				return this._Flags;
			}
			set
			{
				if ((this._Flags != value))
				{
					this.OnFlagsChanging(value);
					this.SendPropertyChanging();
					this._Flags = value;
					this.SendPropertyChanged("Flags");
					this.OnFlagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FSPortfolio_PortfolioItem", Storage="_PortfolioItems", ThisKey="FileSystemItemID", OtherKey="PortfolioID")]
		public EntitySet<PortfolioItem> PortfolioItems
		{
			get
			{
				return this._PortfolioItems;
			}
			set
			{
				this._PortfolioItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PortfolioItems(PortfolioItem entity)
		{
			this.SendPropertyChanging();
			entity.FSPortfolio = this;
		}
		
		private void detach_PortfolioItems(PortfolioItem entity)
		{
			this.SendPropertyChanging();
			entity.FSPortfolio = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockScouterGrade")]
	public partial class StockScouterGrade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockID;
		
		private System.DateTime _Date;
		
		private byte _Type;
		
		private byte _Value;
		
		private EntityRef<Stock> _Stock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnValueChanging(byte value);
    partial void OnValueChanged();
    #endregion
		
		public StockScouterGrade()
		{
			this._Stock = default(EntityRef<Stock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="TinyInt NOT NULL")]
		public byte Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_StockScouterGrade", Storage="_Stock", ThisKey="StockID", OtherKey="ID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.StockScouterGrades.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.StockScouterGrades.Add(this);
						this._StockID = value.ID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Company")]
	public partial class Company : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private string _WebSite;
		
		private System.Nullable<short> _BaseCurrencyID;
		
		private System.Nullable<short> _BaseCountryID;
		
		private EntitySet<Company_Sector_Relation> _Company_Sector_Relations;
		
		private EntitySet<FinancialData> _FinancialDatas;
		
		private EntitySet<Stock> _Stocks;
		
		private EntityRef<Currency> _Currency;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnWebSiteChanging(string value);
    partial void OnWebSiteChanged();
    partial void OnBaseCurrencyIDChanging(System.Nullable<short> value);
    partial void OnBaseCurrencyIDChanged();
    partial void OnBaseCountryIDChanging(System.Nullable<short> value);
    partial void OnBaseCountryIDChanged();
    #endregion
		
		public Company()
		{
			this._Company_Sector_Relations = new EntitySet<Company_Sector_Relation>(new Action<Company_Sector_Relation>(this.attach_Company_Sector_Relations), new Action<Company_Sector_Relation>(this.detach_Company_Sector_Relations));
			this._FinancialDatas = new EntitySet<FinancialData>(new Action<FinancialData>(this.attach_FinancialDatas), new Action<FinancialData>(this.detach_FinancialDatas));
			this._Stocks = new EntitySet<Stock>(new Action<Stock>(this.attach_Stocks), new Action<Stock>(this.detach_Stocks));
			this._Currency = default(EntityRef<Currency>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WebSite", DbType="NVarChar(MAX)")]
		public string WebSite
		{
			get
			{
				return this._WebSite;
			}
			set
			{
				if ((this._WebSite != value))
				{
					this.OnWebSiteChanging(value);
					this.SendPropertyChanging();
					this._WebSite = value;
					this.SendPropertyChanged("WebSite");
					this.OnWebSiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseCurrencyID", DbType="SmallInt")]
		public System.Nullable<short> BaseCurrencyID
		{
			get
			{
				return this._BaseCurrencyID;
			}
			set
			{
				if ((this._BaseCurrencyID != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBaseCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._BaseCurrencyID = value;
					this.SendPropertyChanged("BaseCurrencyID");
					this.OnBaseCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseCountryID", DbType="SmallInt")]
		public System.Nullable<short> BaseCountryID
		{
			get
			{
				return this._BaseCountryID;
			}
			set
			{
				if ((this._BaseCountryID != value))
				{
					this.OnBaseCountryIDChanging(value);
					this.SendPropertyChanging();
					this._BaseCountryID = value;
					this.SendPropertyChanged("BaseCountryID");
					this.OnBaseCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Company_Sector_Relation", Storage="_Company_Sector_Relations", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<Company_Sector_Relation> Company_Sector_Relations
		{
			get
			{
				return this._Company_Sector_Relations;
			}
			set
			{
				this._Company_Sector_Relations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_FinancialData", Storage="_FinancialDatas", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<FinancialData> FinancialDatas
		{
			get
			{
				return this._FinancialDatas;
			}
			set
			{
				this._FinancialDatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Stock", Storage="_Stocks", ThisKey="ID", OtherKey="CompanyID")]
		public EntitySet<Stock> Stocks
		{
			get
			{
				return this._Stocks;
			}
			set
			{
				this._Stocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_Company", Storage="_Currency", ThisKey="BaseCurrencyID", OtherKey="ID", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.Companies.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.Companies.Add(this);
						this._BaseCurrencyID = value.ID;
					}
					else
					{
						this._BaseCurrencyID = default(Nullable<short>);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Company_Sector_Relations(Company_Sector_Relation entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Company_Sector_Relations(Company_Sector_Relation entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_FinancialDatas(FinancialData entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_FinancialDatas(FinancialData entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
		
		private void attach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Company = this;
		}
		
		private void detach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Company = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ChinaAnalystGrade")]
	public partial class ChinaAnalystGrade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockID;
		
		private System.DateTime _Date;
		
		private float _Value;
		
		private EntityRef<Stock> _Stock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnValueChanging(float value);
    partial void OnValueChanged();
    #endregion
		
		public ChinaAnalystGrade()
		{
			this._Stock = default(EntityRef<Stock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="Real NOT NULL")]
		public float Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_ChinaAnalystGrade", Storage="_Stock", ThisKey="StockID", OtherKey="ID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.ChinaAnalystGrades.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.ChinaAnalystGrades.Add(this);
						this._StockID = value.ID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HistoricalDoubleItem")]
	public partial class HistoricalDoubleItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _TypeID;
		
		private int _SubTableID;
		
		private System.DateTime _Date;
		
		private double _DoubleData;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(byte value);
    partial void OnTypeIDChanged();
    partial void OnSubTableIDChanging(int value);
    partial void OnSubTableIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnDoubleDataChanging(double value);
    partial void OnDoubleDataChanged();
    #endregion
		
		public HistoricalDoubleItem()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubTableID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubTableID
		{
			get
			{
				return this._SubTableID;
			}
			set
			{
				if ((this._SubTableID != value))
				{
					this.OnSubTableIDChanging(value);
					this.SendPropertyChanging();
					this._SubTableID = value;
					this.SendPropertyChanged("SubTableID");
					this.OnSubTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoubleData", DbType="Float NOT NULL")]
		public double DoubleData
		{
			get
			{
				return this._DoubleData;
			}
			set
			{
				if ((this._DoubleData != value))
				{
					this.OnDoubleDataChanging(value);
					this.SendPropertyChanging();
					this._DoubleData = value;
					this.SendPropertyChanged("DoubleData");
					this.OnDoubleDataChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GeoInvestingGrade")]
	public partial class GeoInvestingGrade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _Type;
		
		private int _StockID;
		
		private System.DateTime _Date;
		
		private byte _Value;
		
		private EntityRef<Stock> _Stock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnValueChanging(byte value);
    partial void OnValueChanged();
    #endregion
		
		public GeoInvestingGrade()
		{
			this._Stock = default(EntityRef<Stock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="TinyInt NOT NULL")]
		public byte Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_GeoInvestingGrade", Storage="_Stock", ThisKey="StockID", OtherKey="ID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.GeoInvestingGrades.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.GeoInvestingGrades.Add(this);
						this._StockID = value.ID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockQuote")]
	public partial class StockQuote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockID;
		
		private System.DateTime _Date;
		
		private System.Nullable<float> _OpenPrice;
		
		private System.Nullable<float> _ClosePrice;
		
		private System.Nullable<float> _HighPrice;
		
		private System.Nullable<float> _LowPrice;
		
		private System.Nullable<long> _Volume;
		
		private EntityRef<Stock> _Stock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnOpenPriceChanging(System.Nullable<float> value);
    partial void OnOpenPriceChanged();
    partial void OnClosePriceChanging(System.Nullable<float> value);
    partial void OnClosePriceChanged();
    partial void OnHighPriceChanging(System.Nullable<float> value);
    partial void OnHighPriceChanged();
    partial void OnLowPriceChanging(System.Nullable<float> value);
    partial void OnLowPriceChanged();
    partial void OnVolumeChanging(System.Nullable<long> value);
    partial void OnVolumeChanged();
    #endregion
		
		public StockQuote()
		{
			this._Stock = default(EntityRef<Stock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenPrice", DbType="Real")]
		public System.Nullable<float> OpenPrice
		{
			get
			{
				return this._OpenPrice;
			}
			set
			{
				if ((this._OpenPrice != value))
				{
					this.OnOpenPriceChanging(value);
					this.SendPropertyChanging();
					this._OpenPrice = value;
					this.SendPropertyChanged("OpenPrice");
					this.OnOpenPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosePrice", DbType="Real")]
		public System.Nullable<float> ClosePrice
		{
			get
			{
				return this._ClosePrice;
			}
			set
			{
				if ((this._ClosePrice != value))
				{
					this.OnClosePriceChanging(value);
					this.SendPropertyChanging();
					this._ClosePrice = value;
					this.SendPropertyChanged("ClosePrice");
					this.OnClosePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighPrice", DbType="Real")]
		public System.Nullable<float> HighPrice
		{
			get
			{
				return this._HighPrice;
			}
			set
			{
				if ((this._HighPrice != value))
				{
					this.OnHighPriceChanging(value);
					this.SendPropertyChanging();
					this._HighPrice = value;
					this.SendPropertyChanged("HighPrice");
					this.OnHighPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowPrice", DbType="Real")]
		public System.Nullable<float> LowPrice
		{
			get
			{
				return this._LowPrice;
			}
			set
			{
				if ((this._LowPrice != value))
				{
					this.OnLowPriceChanging(value);
					this.SendPropertyChanging();
					this._LowPrice = value;
					this.SendPropertyChanged("LowPrice");
					this.OnLowPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="BigInt")]
		public System.Nullable<long> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_StockQuote", Storage="_Stock", ThisKey="StockID", OtherKey="ID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.StockQuotes.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.StockQuotes.Add(this);
						this._StockID = value.ID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EarningsEstimate")]
	public partial class EarningsEstimate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _Flags;
		
		private int _StockID;
		
		private byte _TypeID;
		
		private System.DateTime _ReleaseDate;
		
		private System.DateTime _EstimationDate;
		
		private System.Nullable<float> _EstimationValue;
		
		private EntityRef<Stock> _Stock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFlagsChanging(byte value);
    partial void OnFlagsChanged();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnTypeIDChanging(byte value);
    partial void OnTypeIDChanged();
    partial void OnReleaseDateChanging(System.DateTime value);
    partial void OnReleaseDateChanged();
    partial void OnEstimationDateChanging(System.DateTime value);
    partial void OnEstimationDateChanged();
    partial void OnEstimationValueChanging(System.Nullable<float> value);
    partial void OnEstimationValueChanged();
    #endregion
		
		public EarningsEstimate()
		{
			this._Stock = default(EntityRef<Stock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flags", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte Flags
		{
			get
			{
				return this._Flags;
			}
			set
			{
				if ((this._Flags != value))
				{
					this.OnFlagsChanging(value);
					this.SendPropertyChanging();
					this._Flags = value;
					this.SendPropertyChanged("Flags");
					this.OnFlagsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReleaseDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime ReleaseDate
		{
			get
			{
				return this._ReleaseDate;
			}
			set
			{
				if ((this._ReleaseDate != value))
				{
					this.OnReleaseDateChanging(value);
					this.SendPropertyChanging();
					this._ReleaseDate = value;
					this.SendPropertyChanged("ReleaseDate");
					this.OnReleaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimationDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime EstimationDate
		{
			get
			{
				return this._EstimationDate;
			}
			set
			{
				if ((this._EstimationDate != value))
				{
					this.OnEstimationDateChanging(value);
					this.SendPropertyChanging();
					this._EstimationDate = value;
					this.SendPropertyChanged("EstimationDate");
					this.OnEstimationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EstimationValue", DbType="Real")]
		public System.Nullable<float> EstimationValue
		{
			get
			{
				return this._EstimationValue;
			}
			set
			{
				if ((this._EstimationValue != value))
				{
					this.OnEstimationValueChanging(value);
					this.SendPropertyChanging();
					this._EstimationValue = value;
					this.SendPropertyChanged("EstimationValue");
					this.OnEstimationValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_EarningsEstimate", Storage="_Stock", ThisKey="StockID", OtherKey="ID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.EarningsEstimates.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.EarningsEstimates.Add(this);
						this._StockID = value.ID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QuickfolioItem")]
	public partial class QuickfolioItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _QuickfolioID;
		
		private byte _AssetTypeID;
		
		private int _AssetSubTableID;
		
		private EntityRef<FileSystemItem> _FileSystemItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQuickfolioIDChanging(int value);
    partial void OnQuickfolioIDChanged();
    partial void OnAssetTypeIDChanging(byte value);
    partial void OnAssetTypeIDChanged();
    partial void OnAssetSubTableIDChanging(int value);
    partial void OnAssetSubTableIDChanged();
    #endregion
		
		public QuickfolioItem()
		{
			this._FileSystemItem = default(EntityRef<FileSystemItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuickfolioID", DbType="Int NOT NULL")]
		public int QuickfolioID
		{
			get
			{
				return this._QuickfolioID;
			}
			set
			{
				if ((this._QuickfolioID != value))
				{
					if (this._FileSystemItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuickfolioIDChanging(value);
					this.SendPropertyChanging();
					this._QuickfolioID = value;
					this.SendPropertyChanged("QuickfolioID");
					this.OnQuickfolioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetTypeID", DbType="TinyInt NOT NULL")]
		public byte AssetTypeID
		{
			get
			{
				return this._AssetTypeID;
			}
			set
			{
				if ((this._AssetTypeID != value))
				{
					this.OnAssetTypeIDChanging(value);
					this.SendPropertyChanging();
					this._AssetTypeID = value;
					this.SendPropertyChanged("AssetTypeID");
					this.OnAssetTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssetSubTableID", DbType="Int NOT NULL")]
		public int AssetSubTableID
		{
			get
			{
				return this._AssetSubTableID;
			}
			set
			{
				if ((this._AssetSubTableID != value))
				{
					this.OnAssetSubTableIDChanging(value);
					this.SendPropertyChanging();
					this._AssetSubTableID = value;
					this.SendPropertyChanged("AssetSubTableID");
					this.OnAssetSubTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="FileSystemItem_QuickfolioItem", Storage="_FileSystemItem", ThisKey="QuickfolioID", OtherKey="ID", IsForeignKey=true)]
		public FileSystemItem FileSystemItem
		{
			get
			{
				return this._FileSystemItem.Entity;
			}
			set
			{
				FileSystemItem previousValue = this._FileSystemItem.Entity;
				if (((previousValue != value) 
							|| (this._FileSystemItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileSystemItem.Entity = null;
						previousValue.QuickfolioItems.Remove(this);
					}
					this._FileSystemItem.Entity = value;
					if ((value != null))
					{
						value.QuickfolioItems.Add(this);
						this._QuickfolioID = value.ID;
					}
					else
					{
						this._QuickfolioID = default(int);
					}
					this.SendPropertyChanged("FileSystemItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Currency")]
	public partial class Currency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _Sign;
		
		private string _IsoCode;
		
		private string _Description;
		
		private EntitySet<Company> _Companies;
		
		private EntitySet<Future> _Futures;
		
		private EntitySet<Stock> _Stocks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnSignChanging(string value);
    partial void OnSignChanged();
    partial void OnIsoCodeChanging(string value);
    partial void OnIsoCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Currency()
		{
			this._Companies = new EntitySet<Company>(new Action<Company>(this.attach_Companies), new Action<Company>(this.detach_Companies));
			this._Futures = new EntitySet<Future>(new Action<Future>(this.attach_Futures), new Action<Future>(this.detach_Futures));
			this._Stocks = new EntitySet<Stock>(new Action<Stock>(this.attach_Stocks), new Action<Stock>(this.detach_Stocks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sign", DbType="NVarChar(MAX)")]
		public string Sign
		{
			get
			{
				return this._Sign;
			}
			set
			{
				if ((this._Sign != value))
				{
					this.OnSignChanging(value);
					this.SendPropertyChanging();
					this._Sign = value;
					this.SendPropertyChanged("Sign");
					this.OnSignChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsoCode", DbType="NVarChar(3)")]
		public string IsoCode
		{
			get
			{
				return this._IsoCode;
			}
			set
			{
				if ((this._IsoCode != value))
				{
					this.OnIsoCodeChanging(value);
					this.SendPropertyChanging();
					this._IsoCode = value;
					this.SendPropertyChanged("IsoCode");
					this.OnIsoCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_Company", Storage="_Companies", ThisKey="ID", OtherKey="BaseCurrencyID")]
		public EntitySet<Company> Companies
		{
			get
			{
				return this._Companies;
			}
			set
			{
				this._Companies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_Future", Storage="_Futures", ThisKey="ID", OtherKey="CurrencyID")]
		public EntitySet<Future> Futures
		{
			get
			{
				return this._Futures;
			}
			set
			{
				this._Futures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_Stock", Storage="_Stocks", ThisKey="ID", OtherKey="CurrencyID")]
		public EntitySet<Stock> Stocks
		{
			get
			{
				return this._Stocks;
			}
			set
			{
				this._Stocks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_Companies(Company entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_Futures(Future entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_Futures(Future entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
		
		private void attach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Currency = this;
		}
		
		private void detach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Currency = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HQUser")]
	public partial class HQUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _UserName;
		
		private string _Password;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<FileSystemItem> _FileSystemItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public HQUser()
		{
			this._FileSystemItems = new EntitySet<FileSystemItem>(new Action<FileSystemItem>(this.attach_FileSystemItems), new Action<FileSystemItem>(this.detach_FileSystemItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(MAX)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(MAX)")]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="HQUser_FileSystemItem", Storage="_FileSystemItems", ThisKey="ID", OtherKey="UserID")]
		public EntitySet<FileSystemItem> FileSystemItems
		{
			get
			{
				return this._FileSystemItems;
			}
			set
			{
				this._FileSystemItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FileSystemItems(FileSystemItem entity)
		{
			this.SendPropertyChanging();
			entity.HQUser = this;
		}
		
		private void detach_FileSystemItems(FileSystemItem entity)
		{
			this.SendPropertyChanging();
			entity.HQUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HQUserGroup")]
	public partial class HQUserGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public HQUserGroup()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(225) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.HQUser_HQUserGroup_Relation")]
	public partial class HQUser_HQUserGroup_Relation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _UserGroupID;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserGroupIDChanging(int value);
    partial void OnUserGroupIDChanged();
    #endregion
		
		public HQUser_HQUserGroup_Relation()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserGroupID
		{
			get
			{
				return this._UserGroupID;
			}
			set
			{
				if ((this._UserGroupID != value))
				{
					this.OnUserGroupIDChanging(value);
					this.SendPropertyChanging();
					this._UserGroupID = value;
					this.SendPropertyChanged("UserGroupID");
					this.OnUserGroupIDChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.VectorVestMarketSignal")]
	public partial class VectorVestMarketSignal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Date;
		
		private byte _Signal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnSignalChanging(byte value);
    partial void OnSignalChanged();
    #endregion
		
		public VectorVestMarketSignal()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Signal", DbType="TinyInt NOT NULL")]
		public byte Signal
		{
			get
			{
				return this._Signal;
			}
			set
			{
				if ((this._Signal != value))
				{
					this.OnSignalChanging(value);
					this.SendPropertyChanging();
					this._Signal = value;
					this.SendPropertyChanged("Signal");
					this.OnSignalChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MarketHoliday")]
	public partial class MarketHoliday : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _CountryID;
		
		private System.DateTime _Date;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(byte value);
    partial void OnCountryIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public MarketHoliday()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewsItem")]
	public partial class NewsItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _TypeID;
		
		private int _SubTableID;
		
		private System.DateTime _NewsCreationDateTimeUtc;
		
		private System.DateTime _DbInsertionDateTimeUtc;
		
		private string _Name;
		
		private string _Url;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeIDChanging(byte value);
    partial void OnTypeIDChanged();
    partial void OnSubTableIDChanging(int value);
    partial void OnSubTableIDChanged();
    partial void OnNewsCreationDateTimeUtcChanging(System.DateTime value);
    partial void OnNewsCreationDateTimeUtcChanged();
    partial void OnDbInsertionDateTimeUtcChanging(System.DateTime value);
    partial void OnDbInsertionDateTimeUtcChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUrlChanging(string value);
    partial void OnUrlChanged();
    #endregion
		
		public NewsItem()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeID", DbType="TinyInt NOT NULL", IsPrimaryKey=true)]
		public byte TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubTableID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SubTableID
		{
			get
			{
				return this._SubTableID;
			}
			set
			{
				if ((this._SubTableID != value))
				{
					this.OnSubTableIDChanging(value);
					this.SendPropertyChanging();
					this._SubTableID = value;
					this.SendPropertyChanged("SubTableID");
					this.OnSubTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsCreationDateTimeUtc", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime NewsCreationDateTimeUtc
		{
			get
			{
				return this._NewsCreationDateTimeUtc;
			}
			set
			{
				if ((this._NewsCreationDateTimeUtc != value))
				{
					this.OnNewsCreationDateTimeUtcChanging(value);
					this.SendPropertyChanging();
					this._NewsCreationDateTimeUtc = value;
					this.SendPropertyChanged("NewsCreationDateTimeUtc");
					this.OnNewsCreationDateTimeUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DbInsertionDateTimeUtc", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DbInsertionDateTimeUtc
		{
			get
			{
				return this._DbInsertionDateTimeUtc;
			}
			set
			{
				if ((this._DbInsertionDateTimeUtc != value))
				{
					this.OnDbInsertionDateTimeUtcChanging(value);
					this.SendPropertyChanging();
					this._DbInsertionDateTimeUtc = value;
					this.SendPropertyChanged("DbInsertionDateTimeUtc");
					this.OnDbInsertionDateTimeUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Url", DbType="NVarChar(1024)")]
		public string Url
		{
			get
			{
				return this._Url;
			}
			set
			{
				if ((this._Url != value))
				{
					this.OnUrlChanging(value);
					this.SendPropertyChanging();
					this._Url = value;
					this.SendPropertyChanged("Url");
					this.OnUrlChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PowerEvent")]
	public partial class PowerEvent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _UserID;
		
		private string _Name;
		
		private System.DateTime _EventStartDateTimeUtc;
		
		private string _Urls;
		
		private System.Nullable<int> _InfluencedQuickfolioID;
		
		private System.Nullable<System.DateTime> _InfluenceStartDateTimeUtc;
		
		private System.Nullable<System.DateTime> _InfluenceEndDateTimeUtc;
		
		private System.Nullable<System.DateTime> _EventEndDateTimeUtc;
		
		private EntitySet<Tag_PowerEvent_Relation> _Tag_PowerEvent_Relations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEventStartDateTimeUtcChanging(System.DateTime value);
    partial void OnEventStartDateTimeUtcChanged();
    partial void OnUrlsChanging(string value);
    partial void OnUrlsChanged();
    partial void OnInfluencedQuickfolioIDChanging(System.Nullable<int> value);
    partial void OnInfluencedQuickfolioIDChanged();
    partial void OnInfluenceStartDateTimeUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnInfluenceStartDateTimeUtcChanged();
    partial void OnInfluenceEndDateTimeUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnInfluenceEndDateTimeUtcChanged();
    partial void OnEventEndDateTimeUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnEventEndDateTimeUtcChanged();
    #endregion
		
		public PowerEvent()
		{
			this._Tag_PowerEvent_Relations = new EntitySet<Tag_PowerEvent_Relation>(new Action<Tag_PowerEvent_Relation>(this.attach_Tag_PowerEvent_Relations), new Action<Tag_PowerEvent_Relation>(this.detach_Tag_PowerEvent_Relations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventStartDateTimeUtc", DbType="SmallDateTime NOT NULL")]
		public System.DateTime EventStartDateTimeUtc
		{
			get
			{
				return this._EventStartDateTimeUtc;
			}
			set
			{
				if ((this._EventStartDateTimeUtc != value))
				{
					this.OnEventStartDateTimeUtcChanging(value);
					this.SendPropertyChanging();
					this._EventStartDateTimeUtc = value;
					this.SendPropertyChanged("EventStartDateTimeUtc");
					this.OnEventStartDateTimeUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Urls", DbType="NVarChar(2048)")]
		public string Urls
		{
			get
			{
				return this._Urls;
			}
			set
			{
				if ((this._Urls != value))
				{
					this.OnUrlsChanging(value);
					this.SendPropertyChanging();
					this._Urls = value;
					this.SendPropertyChanged("Urls");
					this.OnUrlsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InfluencedQuickfolioID", DbType="Int")]
		public System.Nullable<int> InfluencedQuickfolioID
		{
			get
			{
				return this._InfluencedQuickfolioID;
			}
			set
			{
				if ((this._InfluencedQuickfolioID != value))
				{
					this.OnInfluencedQuickfolioIDChanging(value);
					this.SendPropertyChanging();
					this._InfluencedQuickfolioID = value;
					this.SendPropertyChanged("InfluencedQuickfolioID");
					this.OnInfluencedQuickfolioIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InfluenceStartDateTimeUtc", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> InfluenceStartDateTimeUtc
		{
			get
			{
				return this._InfluenceStartDateTimeUtc;
			}
			set
			{
				if ((this._InfluenceStartDateTimeUtc != value))
				{
					this.OnInfluenceStartDateTimeUtcChanging(value);
					this.SendPropertyChanging();
					this._InfluenceStartDateTimeUtc = value;
					this.SendPropertyChanged("InfluenceStartDateTimeUtc");
					this.OnInfluenceStartDateTimeUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InfluenceEndDateTimeUtc", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> InfluenceEndDateTimeUtc
		{
			get
			{
				return this._InfluenceEndDateTimeUtc;
			}
			set
			{
				if ((this._InfluenceEndDateTimeUtc != value))
				{
					this.OnInfluenceEndDateTimeUtcChanging(value);
					this.SendPropertyChanging();
					this._InfluenceEndDateTimeUtc = value;
					this.SendPropertyChanged("InfluenceEndDateTimeUtc");
					this.OnInfluenceEndDateTimeUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventEndDateTimeUtc", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> EventEndDateTimeUtc
		{
			get
			{
				return this._EventEndDateTimeUtc;
			}
			set
			{
				if ((this._EventEndDateTimeUtc != value))
				{
					this.OnEventEndDateTimeUtcChanging(value);
					this.SendPropertyChanging();
					this._EventEndDateTimeUtc = value;
					this.SendPropertyChanged("EventEndDateTimeUtc");
					this.OnEventEndDateTimeUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerEvent_Tag_PowerEvent_Relation", Storage="_Tag_PowerEvent_Relations", ThisKey="ID", OtherKey="PowerEventID")]
		public EntitySet<Tag_PowerEvent_Relation> Tag_PowerEvent_Relations
		{
			get
			{
				return this._Tag_PowerEvent_Relations;
			}
			set
			{
				this._Tag_PowerEvent_Relations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tag_PowerEvent_Relations(Tag_PowerEvent_Relation entity)
		{
			this.SendPropertyChanging();
			entity.PowerEvent = this;
		}
		
		private void detach_Tag_PowerEvent_Relations(Tag_PowerEvent_Relation entity)
		{
			this.SendPropertyChanging();
			entity.PowerEvent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tag_PowerEvent_Relation")]
	public partial class Tag_PowerEvent_Relation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TagID;
		
		private int _PowerEventID;
		
		private EntityRef<PowerEvent> _PowerEvent;
		
		private EntityRef<Tag> _Tag;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTagIDChanging(int value);
    partial void OnTagIDChanged();
    partial void OnPowerEventIDChanging(int value);
    partial void OnPowerEventIDChanged();
    #endregion
		
		public Tag_PowerEvent_Relation()
		{
			this._PowerEvent = default(EntityRef<PowerEvent>);
			this._Tag = default(EntityRef<Tag>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					if (this._Tag.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PowerEventID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PowerEventID
		{
			get
			{
				return this._PowerEventID;
			}
			set
			{
				if ((this._PowerEventID != value))
				{
					if (this._PowerEvent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPowerEventIDChanging(value);
					this.SendPropertyChanging();
					this._PowerEventID = value;
					this.SendPropertyChanged("PowerEventID");
					this.OnPowerEventIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PowerEvent_Tag_PowerEvent_Relation", Storage="_PowerEvent", ThisKey="PowerEventID", OtherKey="ID", IsForeignKey=true)]
		public PowerEvent PowerEvent
		{
			get
			{
				return this._PowerEvent.Entity;
			}
			set
			{
				PowerEvent previousValue = this._PowerEvent.Entity;
				if (((previousValue != value) 
							|| (this._PowerEvent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PowerEvent.Entity = null;
						previousValue.Tag_PowerEvent_Relations.Remove(this);
					}
					this._PowerEvent.Entity = value;
					if ((value != null))
					{
						value.Tag_PowerEvent_Relations.Add(this);
						this._PowerEventID = value.ID;
					}
					else
					{
						this._PowerEventID = default(int);
					}
					this.SendPropertyChanged("PowerEvent");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_Tag_PowerEvent_Relation", Storage="_Tag", ThisKey="TagID", OtherKey="ID", IsForeignKey=true)]
		public Tag Tag
		{
			get
			{
				return this._Tag.Entity;
			}
			set
			{
				Tag previousValue = this._Tag.Entity;
				if (((previousValue != value) 
							|| (this._Tag.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tag.Entity = null;
						previousValue.Tag_PowerEvent_Relations.Remove(this);
					}
					this._Tag.Entity = value;
					if ((value != null))
					{
						value.Tag_PowerEvent_Relations.Add(this);
						this._TagID = value.ID;
					}
					else
					{
						this._TagID = default(int);
					}
					this.SendPropertyChanged("Tag");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tag")]
	public partial class Tag : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private EntitySet<Tag_PowerEvent_Relation> _Tag_PowerEvent_Relations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Tag()
		{
			this._Tag_PowerEvent_Relations = new EntitySet<Tag_PowerEvent_Relation>(new Action<Tag_PowerEvent_Relation>(this.attach_Tag_PowerEvent_Relations), new Action<Tag_PowerEvent_Relation>(this.detach_Tag_PowerEvent_Relations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tag_Tag_PowerEvent_Relation", Storage="_Tag_PowerEvent_Relations", ThisKey="ID", OtherKey="TagID")]
		public EntitySet<Tag_PowerEvent_Relation> Tag_PowerEvent_Relations
		{
			get
			{
				return this._Tag_PowerEvent_Relations;
			}
			set
			{
				this._Tag_PowerEvent_Relations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tag_PowerEvent_Relations(Tag_PowerEvent_Relation entity)
		{
			this.SendPropertyChanging();
			entity.Tag = this;
		}
		
		private void detach_Tag_PowerEvent_Relations(Tag_PowerEvent_Relation entity)
		{
			this.SendPropertyChanging();
			entity.Tag = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockIndex")]
	public partial class StockIndex : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _ID;
		
		private string _Name;
		
		private string _Ticker;
		
		private string _Description;
		
		private System.Nullable<short> _CurrencyID;
		
		private EntitySet<StockIndexQuote> _StockIndexQuotes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(short value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCurrencyIDChanging(System.Nullable<short> value);
    partial void OnCurrencyIDChanged();
    #endregion
		
		public StockIndex()
		{
			this._StockIndexQuotes = new EntitySet<StockIndexQuote>(new Action<StockIndexQuote>(this.attach_StockIndexQuotes), new Action<StockIndexQuote>(this.detach_StockIndexQuotes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticker", DbType="NChar(10)")]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="SmallInt")]
		public System.Nullable<short> CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockIndex_StockIndexQuote", Storage="_StockIndexQuotes", ThisKey="ID", OtherKey="StockIndexID")]
		public EntitySet<StockIndexQuote> StockIndexQuotes
		{
			get
			{
				return this._StockIndexQuotes;
			}
			set
			{
				this._StockIndexQuotes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_StockIndexQuotes(StockIndexQuote entity)
		{
			this.SendPropertyChanging();
			entity.StockIndex = this;
		}
		
		private void detach_StockIndexQuotes(StockIndexQuote entity)
		{
			this.SendPropertyChanging();
			entity.StockIndex = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockIndexQuote")]
	public partial class StockIndexQuote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _StockIndexID;
		
		private System.DateTime _Date;
		
		private System.Nullable<float> _OpenPrice;
		
		private System.Nullable<float> _ClosePrice;
		
		private System.Nullable<float> _HighPrice;
		
		private System.Nullable<float> _LowPrice;
		
		private System.Nullable<long> _Volume;
		
		private EntityRef<StockIndex> _StockIndex;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockIndexIDChanging(short value);
    partial void OnStockIndexIDChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnOpenPriceChanging(System.Nullable<float> value);
    partial void OnOpenPriceChanged();
    partial void OnClosePriceChanging(System.Nullable<float> value);
    partial void OnClosePriceChanged();
    partial void OnHighPriceChanging(System.Nullable<float> value);
    partial void OnHighPriceChanged();
    partial void OnLowPriceChanging(System.Nullable<float> value);
    partial void OnLowPriceChanged();
    partial void OnVolumeChanging(System.Nullable<long> value);
    partial void OnVolumeChanged();
    #endregion
		
		public StockIndexQuote()
		{
			this._StockIndex = default(EntityRef<StockIndex>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockIndexID", DbType="SmallInt NOT NULL", IsPrimaryKey=true)]
		public short StockIndexID
		{
			get
			{
				return this._StockIndexID;
			}
			set
			{
				if ((this._StockIndexID != value))
				{
					if (this._StockIndex.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIndexIDChanging(value);
					this.SendPropertyChanging();
					this._StockIndexID = value;
					this.SendPropertyChanged("StockIndexID");
					this.OnStockIndexIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="SmallDateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenPrice", DbType="Real")]
		public System.Nullable<float> OpenPrice
		{
			get
			{
				return this._OpenPrice;
			}
			set
			{
				if ((this._OpenPrice != value))
				{
					this.OnOpenPriceChanging(value);
					this.SendPropertyChanging();
					this._OpenPrice = value;
					this.SendPropertyChanged("OpenPrice");
					this.OnOpenPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosePrice", DbType="Real")]
		public System.Nullable<float> ClosePrice
		{
			get
			{
				return this._ClosePrice;
			}
			set
			{
				if ((this._ClosePrice != value))
				{
					this.OnClosePriceChanging(value);
					this.SendPropertyChanging();
					this._ClosePrice = value;
					this.SendPropertyChanged("ClosePrice");
					this.OnClosePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighPrice", DbType="Real")]
		public System.Nullable<float> HighPrice
		{
			get
			{
				return this._HighPrice;
			}
			set
			{
				if ((this._HighPrice != value))
				{
					this.OnHighPriceChanging(value);
					this.SendPropertyChanging();
					this._HighPrice = value;
					this.SendPropertyChanged("HighPrice");
					this.OnHighPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowPrice", DbType="Real")]
		public System.Nullable<float> LowPrice
		{
			get
			{
				return this._LowPrice;
			}
			set
			{
				if ((this._LowPrice != value))
				{
					this.OnLowPriceChanging(value);
					this.SendPropertyChanging();
					this._LowPrice = value;
					this.SendPropertyChanged("LowPrice");
					this.OnLowPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="BigInt")]
		public System.Nullable<long> Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockIndex_StockIndexQuote", Storage="_StockIndex", ThisKey="StockIndexID", OtherKey="ID", IsForeignKey=true)]
		public StockIndex StockIndex
		{
			get
			{
				return this._StockIndex.Entity;
			}
			set
			{
				StockIndex previousValue = this._StockIndex.Entity;
				if (((previousValue != value) 
							|| (this._StockIndex.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StockIndex.Entity = null;
						previousValue.StockIndexQuotes.Remove(this);
					}
					this._StockIndex.Entity = value;
					if ((value != null))
					{
						value.StockIndexQuotes.Add(this);
						this._StockIndexID = value.ID;
					}
					else
					{
						this._StockIndexID = default(short);
					}
					this.SendPropertyChanged("StockIndex");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FuturesQuote")]
	public partial class FuturesQuote : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Date;
		
		private int _FuturesID;
		
		private System.Nullable<float> _OpenPrice;
		
		private System.Nullable<float> _HighPrice;
		
		private System.Nullable<float> _LowPrice;
		
		private System.Nullable<float> _ClosePrice;
		
		private float _SettlePrice;
		
		private int _Volume;
		
		private int _OpenInterest;
		
		private short _EFP;
		
		private EntityRef<Future> _Future;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    partial void OnFuturesIDChanging(int value);
    partial void OnFuturesIDChanged();
    partial void OnOpenPriceChanging(System.Nullable<float> value);
    partial void OnOpenPriceChanged();
    partial void OnHighPriceChanging(System.Nullable<float> value);
    partial void OnHighPriceChanged();
    partial void OnLowPriceChanging(System.Nullable<float> value);
    partial void OnLowPriceChanged();
    partial void OnClosePriceChanging(System.Nullable<float> value);
    partial void OnClosePriceChanged();
    partial void OnSettlePriceChanging(float value);
    partial void OnSettlePriceChanged();
    partial void OnVolumeChanging(int value);
    partial void OnVolumeChanged();
    partial void OnOpenInterestChanging(int value);
    partial void OnOpenInterestChanged();
    partial void OnEFPChanging(short value);
    partial void OnEFPChanged();
    #endregion
		
		public FuturesQuote()
		{
			this._Future = default(EntityRef<Future>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuturesID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FuturesID
		{
			get
			{
				return this._FuturesID;
			}
			set
			{
				if ((this._FuturesID != value))
				{
					if (this._Future.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFuturesIDChanging(value);
					this.SendPropertyChanging();
					this._FuturesID = value;
					this.SendPropertyChanged("FuturesID");
					this.OnFuturesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenPrice", DbType="Real NOT NULL")]
		public System.Nullable<float> OpenPrice
		{
			get
			{
				return this._OpenPrice;
			}
			set
			{
				if ((this._OpenPrice != value))
				{
					this.OnOpenPriceChanging(value);
					this.SendPropertyChanging();
					this._OpenPrice = value;
					this.SendPropertyChanged("OpenPrice");
					this.OnOpenPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HighPrice", DbType="Real NOT NULL")]
		public System.Nullable<float> HighPrice
		{
			get
			{
				return this._HighPrice;
			}
			set
			{
				if ((this._HighPrice != value))
				{
					this.OnHighPriceChanging(value);
					this.SendPropertyChanging();
					this._HighPrice = value;
					this.SendPropertyChanged("HighPrice");
					this.OnHighPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LowPrice", DbType="Real NOT NULL")]
		public System.Nullable<float> LowPrice
		{
			get
			{
				return this._LowPrice;
			}
			set
			{
				if ((this._LowPrice != value))
				{
					this.OnLowPriceChanging(value);
					this.SendPropertyChanging();
					this._LowPrice = value;
					this.SendPropertyChanged("LowPrice");
					this.OnLowPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosePrice", DbType="Real NOT NULL")]
		public System.Nullable<float> ClosePrice
		{
			get
			{
				return this._ClosePrice;
			}
			set
			{
				if ((this._ClosePrice != value))
				{
					this.OnClosePriceChanging(value);
					this.SendPropertyChanging();
					this._ClosePrice = value;
					this.SendPropertyChanged("ClosePrice");
					this.OnClosePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SettlePrice", DbType="Real NOT NULL")]
		public float SettlePrice
		{
			get
			{
				return this._SettlePrice;
			}
			set
			{
				if ((this._SettlePrice != value))
				{
					this.OnSettlePriceChanging(value);
					this.SendPropertyChanging();
					this._SettlePrice = value;
					this.SendPropertyChanged("SettlePrice");
					this.OnSettlePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Volume", DbType="Int NOT NULL")]
		public int Volume
		{
			get
			{
				return this._Volume;
			}
			set
			{
				if ((this._Volume != value))
				{
					this.OnVolumeChanging(value);
					this.SendPropertyChanging();
					this._Volume = value;
					this.SendPropertyChanged("Volume");
					this.OnVolumeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenInterest", DbType="Int NOT NULL")]
		public int OpenInterest
		{
			get
			{
				return this._OpenInterest;
			}
			set
			{
				if ((this._OpenInterest != value))
				{
					this.OnOpenInterestChanging(value);
					this.SendPropertyChanging();
					this._OpenInterest = value;
					this.SendPropertyChanged("OpenInterest");
					this.OnOpenInterestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EFP", DbType="SmallInt NOT NULL")]
		public short EFP
		{
			get
			{
				return this._EFP;
			}
			set
			{
				if ((this._EFP != value))
				{
					this.OnEFPChanging(value);
					this.SendPropertyChanging();
					this._EFP = value;
					this.SendPropertyChanged("EFP");
					this.OnEFPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Future_FuturesQuote", Storage="_Future", ThisKey="FuturesID", OtherKey="ID", IsForeignKey=true)]
		public Future Future
		{
			get
			{
				return this._Future.Entity;
			}
			set
			{
				Future previousValue = this._Future.Entity;
				if (((previousValue != value) 
							|| (this._Future.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Future.Entity = null;
						previousValue.FuturesQuotes.Remove(this);
					}
					this._Future.Entity = value;
					if ((value != null))
					{
						value.FuturesQuotes.Add(this);
						this._FuturesID = value.ID;
					}
					else
					{
						this._FuturesID = default(int);
					}
					this.SendPropertyChanged("Future");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Futures")]
	public partial class Future : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private byte _UnderlyingAssetType;
		
		private int _UnderlyingSubTableID;
		
		private System.DateTime _ExpirationDate;
		
		private short _Multiplier;
		
		private byte _StockExchangeID;
		
		private short _CurrencyID;
		
		private string _Ticker;
		
		private EntitySet<FuturesQuote> _FuturesQuotes;
		
		private EntityRef<Currency> _Currency;
		
		private EntityRef<StockExchange> _StockExchange;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUnderlyingAssetTypeChanging(byte value);
    partial void OnUnderlyingAssetTypeChanged();
    partial void OnUnderlyingSubTableIDChanging(int value);
    partial void OnUnderlyingSubTableIDChanged();
    partial void OnExpirationDateChanging(System.DateTime value);
    partial void OnExpirationDateChanged();
    partial void OnMultiplierChanging(short value);
    partial void OnMultiplierChanged();
    partial void OnStockExchangeIDChanging(byte value);
    partial void OnStockExchangeIDChanged();
    partial void OnCurrencyIDChanging(short value);
    partial void OnCurrencyIDChanged();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    #endregion
		
		public Future()
		{
			this._FuturesQuotes = new EntitySet<FuturesQuote>(new Action<FuturesQuote>(this.attach_FuturesQuotes), new Action<FuturesQuote>(this.detach_FuturesQuotes));
			this._Currency = default(EntityRef<Currency>);
			this._StockExchange = default(EntityRef<StockExchange>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnderlyingAssetType", DbType="TinyInt NOT NULL")]
		public byte UnderlyingAssetType
		{
			get
			{
				return this._UnderlyingAssetType;
			}
			set
			{
				if ((this._UnderlyingAssetType != value))
				{
					this.OnUnderlyingAssetTypeChanging(value);
					this.SendPropertyChanging();
					this._UnderlyingAssetType = value;
					this.SendPropertyChanged("UnderlyingAssetType");
					this.OnUnderlyingAssetTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnderlyingSubTableID", DbType="Int NOT NULL")]
		public int UnderlyingSubTableID
		{
			get
			{
				return this._UnderlyingSubTableID;
			}
			set
			{
				if ((this._UnderlyingSubTableID != value))
				{
					this.OnUnderlyingSubTableIDChanging(value);
					this.SendPropertyChanging();
					this._UnderlyingSubTableID = value;
					this.SendPropertyChanged("UnderlyingSubTableID");
					this.OnUnderlyingSubTableIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationDate", DbType="Date NOT NULL")]
		public System.DateTime ExpirationDate
		{
			get
			{
				return this._ExpirationDate;
			}
			set
			{
				if ((this._ExpirationDate != value))
				{
					this.OnExpirationDateChanging(value);
					this.SendPropertyChanging();
					this._ExpirationDate = value;
					this.SendPropertyChanged("ExpirationDate");
					this.OnExpirationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Multiplier", DbType="SmallInt NOT NULL")]
		public short Multiplier
		{
			get
			{
				return this._Multiplier;
			}
			set
			{
				if ((this._Multiplier != value))
				{
					this.OnMultiplierChanging(value);
					this.SendPropertyChanging();
					this._Multiplier = value;
					this.SendPropertyChanged("Multiplier");
					this.OnMultiplierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockExchangeID", DbType="TinyInt NOT NULL")]
		public byte StockExchangeID
		{
			get
			{
				return this._StockExchangeID;
			}
			set
			{
				if ((this._StockExchangeID != value))
				{
					if (this._StockExchange.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockExchangeIDChanging(value);
					this.SendPropertyChanging();
					this._StockExchangeID = value;
					this.SendPropertyChanged("StockExchangeID");
					this.OnStockExchangeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="SmallInt NOT NULL")]
		public short CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticker", DbType="VarChar(10)")]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Future_FuturesQuote", Storage="_FuturesQuotes", ThisKey="ID", OtherKey="FuturesID")]
		public EntitySet<FuturesQuote> FuturesQuotes
		{
			get
			{
				return this._FuturesQuotes;
			}
			set
			{
				this._FuturesQuotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_Future", Storage="_Currency", ThisKey="CurrencyID", OtherKey="ID", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.Futures.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.Futures.Add(this);
						this._CurrencyID = value.ID;
					}
					else
					{
						this._CurrencyID = default(short);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockExchange_Future", Storage="_StockExchange", ThisKey="StockExchangeID", OtherKey="ID", IsForeignKey=true)]
		public StockExchange StockExchange
		{
			get
			{
				return this._StockExchange.Entity;
			}
			set
			{
				StockExchange previousValue = this._StockExchange.Entity;
				if (((previousValue != value) 
							|| (this._StockExchange.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StockExchange.Entity = null;
						previousValue.Futures.Remove(this);
					}
					this._StockExchange.Entity = value;
					if ((value != null))
					{
						value.Futures.Add(this);
						this._StockExchangeID = value.ID;
					}
					else
					{
						this._StockExchangeID = default(byte);
					}
					this.SendPropertyChanged("StockExchange");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FuturesQuotes(FuturesQuote entity)
		{
			this.SendPropertyChanging();
			entity.Future = this;
		}
		
		private void detach_FuturesQuotes(FuturesQuote entity)
		{
			this.SendPropertyChanging();
			entity.Future = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StockExchange")]
	public partial class StockExchange : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _ID;
		
		private string _Name;
		
		private string _Description;
		
		private byte _TimeZone;
		
		private byte _CountryID;
		
		private EntitySet<Future> _Futures;
		
		private EntitySet<Stock> _Stocks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(byte value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnTimeZoneChanging(byte value);
    partial void OnTimeZoneChanged();
    partial void OnCountryIDChanging(byte value);
    partial void OnCountryIDChanged();
    #endregion
		
		public StockExchange()
		{
			this._Futures = new EntitySet<Future>(new Action<Future>(this.attach_Futures), new Action<Future>(this.detach_Futures));
			this._Stocks = new EntitySet<Stock>(new Action<Stock>(this.attach_Stocks), new Action<Stock>(this.detach_Stocks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(8) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeZone", DbType="TinyInt NOT NULL")]
		public byte TimeZone
		{
			get
			{
				return this._TimeZone;
			}
			set
			{
				if ((this._TimeZone != value))
				{
					this.OnTimeZoneChanging(value);
					this.SendPropertyChanging();
					this._TimeZone = value;
					this.SendPropertyChanged("TimeZone");
					this.OnTimeZoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryID", DbType="TinyInt NOT NULL")]
		public byte CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockExchange_Future", Storage="_Futures", ThisKey="ID", OtherKey="StockExchangeID")]
		public EntitySet<Future> Futures
		{
			get
			{
				return this._Futures;
			}
			set
			{
				this._Futures.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockExchange_Stock", Storage="_Stocks", ThisKey="ID", OtherKey="StockExchangeID")]
		public EntitySet<Stock> Stocks
		{
			get
			{
				return this._Stocks;
			}
			set
			{
				this._Stocks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Futures(Future entity)
		{
			this.SendPropertyChanging();
			entity.StockExchange = this;
		}
		
		private void detach_Futures(Future entity)
		{
			this.SendPropertyChanging();
			entity.StockExchange = null;
		}
		
		private void attach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.StockExchange = this;
		}
		
		private void detach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.StockExchange = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stock")]
	public partial class Stock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _CompanyID;
		
		private System.Nullable<int> _FundID;
		
		private string _ISIN;
		
		private string _Ticker;
		
		private bool _IsAlive;
		
		private System.Nullable<short> _CurrencyID;
		
		private System.Nullable<byte> _StockExchangeID;
		
		private string _Name;
		
		private EntitySet<IbdGrade> _IbdGrades;
		
		private EntitySet<ZacksGrade> _ZacksGrades;
		
		private EntitySet<NavellierStockGrade> _NavellierStockGrades;
		
		private EntitySet<FoolSecurityRate> _FoolSecurityRates;
		
		private EntitySet<StockSplitDividend> _StockSplitDividends;
		
		private EntitySet<StockOption> _StockOptions;
		
		private EntitySet<SeasonalEdge> _SeasonalEdges;
		
		private EntitySet<StockScouterGrade> _StockScouterGrades;
		
		private EntitySet<ChinaAnalystGrade> _ChinaAnalystGrades;
		
		private EntitySet<GeoInvestingGrade> _GeoInvestingGrades;
		
		private EntitySet<StockQuote> _StockQuotes;
		
		private EntitySet<EarningsEstimate> _EarningsEstimates;
		
		private EntitySet<EarningsEventCalculatedIndicator> _EarningsEventCalculatedIndicators;
		
		private EntityRef<Ipo> _Ipo;
		
		private EntityRef<Company> _Company;
		
		private EntityRef<Currency> _Currency;
		
		private EntityRef<StockExchange> _StockExchange;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyIDChanging(System.Nullable<int> value);
    partial void OnCompanyIDChanged();
    partial void OnFundIDChanging(System.Nullable<int> value);
    partial void OnFundIDChanged();
    partial void OnISINChanging(string value);
    partial void OnISINChanged();
    partial void OnTickerChanging(string value);
    partial void OnTickerChanged();
    partial void OnIsAliveChanging(bool value);
    partial void OnIsAliveChanged();
    partial void OnCurrencyIDChanging(System.Nullable<short> value);
    partial void OnCurrencyIDChanged();
    partial void OnStockExchangeIDChanging(System.Nullable<byte> value);
    partial void OnStockExchangeIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Stock()
		{
			this._IbdGrades = new EntitySet<IbdGrade>(new Action<IbdGrade>(this.attach_IbdGrades), new Action<IbdGrade>(this.detach_IbdGrades));
			this._ZacksGrades = new EntitySet<ZacksGrade>(new Action<ZacksGrade>(this.attach_ZacksGrades), new Action<ZacksGrade>(this.detach_ZacksGrades));
			this._NavellierStockGrades = new EntitySet<NavellierStockGrade>(new Action<NavellierStockGrade>(this.attach_NavellierStockGrades), new Action<NavellierStockGrade>(this.detach_NavellierStockGrades));
			this._FoolSecurityRates = new EntitySet<FoolSecurityRate>(new Action<FoolSecurityRate>(this.attach_FoolSecurityRates), new Action<FoolSecurityRate>(this.detach_FoolSecurityRates));
			this._StockSplitDividends = new EntitySet<StockSplitDividend>(new Action<StockSplitDividend>(this.attach_StockSplitDividends), new Action<StockSplitDividend>(this.detach_StockSplitDividends));
			this._StockOptions = new EntitySet<StockOption>(new Action<StockOption>(this.attach_StockOptions), new Action<StockOption>(this.detach_StockOptions));
			this._SeasonalEdges = new EntitySet<SeasonalEdge>(new Action<SeasonalEdge>(this.attach_SeasonalEdges), new Action<SeasonalEdge>(this.detach_SeasonalEdges));
			this._StockScouterGrades = new EntitySet<StockScouterGrade>(new Action<StockScouterGrade>(this.attach_StockScouterGrades), new Action<StockScouterGrade>(this.detach_StockScouterGrades));
			this._ChinaAnalystGrades = new EntitySet<ChinaAnalystGrade>(new Action<ChinaAnalystGrade>(this.attach_ChinaAnalystGrades), new Action<ChinaAnalystGrade>(this.detach_ChinaAnalystGrades));
			this._GeoInvestingGrades = new EntitySet<GeoInvestingGrade>(new Action<GeoInvestingGrade>(this.attach_GeoInvestingGrades), new Action<GeoInvestingGrade>(this.detach_GeoInvestingGrades));
			this._StockQuotes = new EntitySet<StockQuote>(new Action<StockQuote>(this.attach_StockQuotes), new Action<StockQuote>(this.detach_StockQuotes));
			this._EarningsEstimates = new EntitySet<EarningsEstimate>(new Action<EarningsEstimate>(this.attach_EarningsEstimates), new Action<EarningsEstimate>(this.detach_EarningsEstimates));
			this._EarningsEventCalculatedIndicators = new EntitySet<EarningsEventCalculatedIndicator>(new Action<EarningsEventCalculatedIndicator>(this.attach_EarningsEventCalculatedIndicators), new Action<EarningsEventCalculatedIndicator>(this.detach_EarningsEventCalculatedIndicators));
			this._Ipo = default(EntityRef<Ipo>);
			this._Company = default(EntityRef<Company>);
			this._Currency = default(EntityRef<Currency>);
			this._StockExchange = default(EntityRef<StockExchange>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="Int")]
		public System.Nullable<int> CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					if (this._Company.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FundID", DbType="Int")]
		public System.Nullable<int> FundID
		{
			get
			{
				return this._FundID;
			}
			set
			{
				if ((this._FundID != value))
				{
					this.OnFundIDChanging(value);
					this.SendPropertyChanging();
					this._FundID = value;
					this.SendPropertyChanged("FundID");
					this.OnFundIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ISIN", DbType="VarChar(12)")]
		public string ISIN
		{
			get
			{
				return this._ISIN;
			}
			set
			{
				if ((this._ISIN != value))
				{
					this.OnISINChanging(value);
					this.SendPropertyChanging();
					this._ISIN = value;
					this.SendPropertyChanged("ISIN");
					this.OnISINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ticker", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Ticker
		{
			get
			{
				return this._Ticker;
			}
			set
			{
				if ((this._Ticker != value))
				{
					this.OnTickerChanging(value);
					this.SendPropertyChanging();
					this._Ticker = value;
					this.SendPropertyChanged("Ticker");
					this.OnTickerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAlive", DbType="Bit NOT NULL")]
		public bool IsAlive
		{
			get
			{
				return this._IsAlive;
			}
			set
			{
				if ((this._IsAlive != value))
				{
					this.OnIsAliveChanging(value);
					this.SendPropertyChanging();
					this._IsAlive = value;
					this.SendPropertyChanged("IsAlive");
					this.OnIsAliveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="SmallInt")]
		public System.Nullable<short> CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._Currency.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockExchangeID", DbType="TinyInt")]
		public System.Nullable<byte> StockExchangeID
		{
			get
			{
				return this._StockExchangeID;
			}
			set
			{
				if ((this._StockExchangeID != value))
				{
					if (this._StockExchange.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockExchangeIDChanging(value);
					this.SendPropertyChanging();
					this._StockExchangeID = value;
					this.SendPropertyChanged("StockExchangeID");
					this.OnStockExchangeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_IbdGrade", Storage="_IbdGrades", ThisKey="ID", OtherKey="StockID")]
		public EntitySet<IbdGrade> IbdGrades
		{
			get
			{
				return this._IbdGrades;
			}
			set
			{
				this._IbdGrades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_ZacksGrade", Storage="_ZacksGrades", ThisKey="ID", OtherKey="StockID")]
		public EntitySet<ZacksGrade> ZacksGrades
		{
			get
			{
				return this._ZacksGrades;
			}
			set
			{
				this._ZacksGrades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_NavellierStockGrade", Storage="_NavellierStockGrades", ThisKey="ID", OtherKey="StockID")]
		public EntitySet<NavellierStockGrade> NavellierStockGrades
		{
			get
			{
				return this._NavellierStockGrades;
			}
			set
			{
				this._NavellierStockGrades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_FoolSecurityRate", Storage="_FoolSecurityRates", ThisKey="ID", OtherKey="StockID")]
		public EntitySet<FoolSecurityRate> FoolSecurityRates
		{
			get
			{
				return this._FoolSecurityRates;
			}
			set
			{
				this._FoolSecurityRates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_StockSplitDividend", Storage="_StockSplitDividends", ThisKey="ID", OtherKey="StockID")]
		public EntitySet<StockSplitDividend> StockSplitDividends
		{
			get
			{
				return this._StockSplitDividends;
			}
			set
			{
				this._StockSplitDividends.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_StockOption", Storage="_StockOptions", ThisKey="ID", OtherKey="UnderlyingStockID")]
		public EntitySet<StockOption> StockOptions
		{
			get
			{
				return this._StockOptions;
			}
			set
			{
				this._StockOptions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_SeasonalEdge", Storage="_SeasonalEdges", ThisKey="ID", OtherKey="StockID")]
		public EntitySet<SeasonalEdge> SeasonalEdges
		{
			get
			{
				return this._SeasonalEdges;
			}
			set
			{
				this._SeasonalEdges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_StockScouterGrade", Storage="_StockScouterGrades", ThisKey="ID", OtherKey="StockID")]
		public EntitySet<StockScouterGrade> StockScouterGrades
		{
			get
			{
				return this._StockScouterGrades;
			}
			set
			{
				this._StockScouterGrades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_ChinaAnalystGrade", Storage="_ChinaAnalystGrades", ThisKey="ID", OtherKey="StockID")]
		public EntitySet<ChinaAnalystGrade> ChinaAnalystGrades
		{
			get
			{
				return this._ChinaAnalystGrades;
			}
			set
			{
				this._ChinaAnalystGrades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_GeoInvestingGrade", Storage="_GeoInvestingGrades", ThisKey="ID", OtherKey="StockID")]
		public EntitySet<GeoInvestingGrade> GeoInvestingGrades
		{
			get
			{
				return this._GeoInvestingGrades;
			}
			set
			{
				this._GeoInvestingGrades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_StockQuote", Storage="_StockQuotes", ThisKey="ID", OtherKey="StockID")]
		public EntitySet<StockQuote> StockQuotes
		{
			get
			{
				return this._StockQuotes;
			}
			set
			{
				this._StockQuotes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_EarningsEstimate", Storage="_EarningsEstimates", ThisKey="ID", OtherKey="StockID")]
		public EntitySet<EarningsEstimate> EarningsEstimates
		{
			get
			{
				return this._EarningsEstimates;
			}
			set
			{
				this._EarningsEstimates.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_EarningsEventCalculatedIndicator", Storage="_EarningsEventCalculatedIndicators", ThisKey="ID", OtherKey="StockID")]
		public EntitySet<EarningsEventCalculatedIndicator> EarningsEventCalculatedIndicators
		{
			get
			{
				return this._EarningsEventCalculatedIndicators;
			}
			set
			{
				this._EarningsEventCalculatedIndicators.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_Ipo", Storage="_Ipo", ThisKey="ID", OtherKey="StockID", IsUnique=true, IsForeignKey=false)]
		public Ipo Ipo
		{
			get
			{
				return this._Ipo.Entity;
			}
			set
			{
				Ipo previousValue = this._Ipo.Entity;
				if (((previousValue != value) 
							|| (this._Ipo.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ipo.Entity = null;
						previousValue.Stock = null;
					}
					this._Ipo.Entity = value;
					if ((value != null))
					{
						value.Stock = this;
					}
					this.SendPropertyChanged("Ipo");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Company_Stock", Storage="_Company", ThisKey="CompanyID", OtherKey="ID", IsForeignKey=true)]
		public Company Company
		{
			get
			{
				return this._Company.Entity;
			}
			set
			{
				Company previousValue = this._Company.Entity;
				if (((previousValue != value) 
							|| (this._Company.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Company.Entity = null;
						previousValue.Stocks.Remove(this);
					}
					this._Company.Entity = value;
					if ((value != null))
					{
						value.Stocks.Add(this);
						this._CompanyID = value.ID;
					}
					else
					{
						this._CompanyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Company");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Currency_Stock", Storage="_Currency", ThisKey="CurrencyID", OtherKey="ID", IsForeignKey=true)]
		public Currency Currency
		{
			get
			{
				return this._Currency.Entity;
			}
			set
			{
				Currency previousValue = this._Currency.Entity;
				if (((previousValue != value) 
							|| (this._Currency.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Currency.Entity = null;
						previousValue.Stocks.Remove(this);
					}
					this._Currency.Entity = value;
					if ((value != null))
					{
						value.Stocks.Add(this);
						this._CurrencyID = value.ID;
					}
					else
					{
						this._CurrencyID = default(Nullable<short>);
					}
					this.SendPropertyChanged("Currency");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StockExchange_Stock", Storage="_StockExchange", ThisKey="StockExchangeID", OtherKey="ID", IsForeignKey=true)]
		public StockExchange StockExchange
		{
			get
			{
				return this._StockExchange.Entity;
			}
			set
			{
				StockExchange previousValue = this._StockExchange.Entity;
				if (((previousValue != value) 
							|| (this._StockExchange.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StockExchange.Entity = null;
						previousValue.Stocks.Remove(this);
					}
					this._StockExchange.Entity = value;
					if ((value != null))
					{
						value.Stocks.Add(this);
						this._StockExchangeID = value.ID;
					}
					else
					{
						this._StockExchangeID = default(Nullable<byte>);
					}
					this.SendPropertyChanged("StockExchange");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_IbdGrades(IbdGrade entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_IbdGrades(IbdGrade entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void attach_ZacksGrades(ZacksGrade entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_ZacksGrades(ZacksGrade entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void attach_NavellierStockGrades(NavellierStockGrade entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_NavellierStockGrades(NavellierStockGrade entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void attach_FoolSecurityRates(FoolSecurityRate entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_FoolSecurityRates(FoolSecurityRate entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void attach_StockSplitDividends(StockSplitDividend entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_StockSplitDividends(StockSplitDividend entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void attach_StockOptions(StockOption entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_StockOptions(StockOption entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void attach_SeasonalEdges(SeasonalEdge entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_SeasonalEdges(SeasonalEdge entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void attach_StockScouterGrades(StockScouterGrade entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_StockScouterGrades(StockScouterGrade entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void attach_ChinaAnalystGrades(ChinaAnalystGrade entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_ChinaAnalystGrades(ChinaAnalystGrade entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void attach_GeoInvestingGrades(GeoInvestingGrade entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_GeoInvestingGrades(GeoInvestingGrade entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void attach_StockQuotes(StockQuote entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_StockQuotes(StockQuote entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void attach_EarningsEstimates(EarningsEstimate entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_EarningsEstimates(EarningsEstimate entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
		
		private void attach_EarningsEventCalculatedIndicators(EarningsEventCalculatedIndicator entity)
		{
			this.SendPropertyChanging();
			entity.Stock = this;
		}
		
		private void detach_EarningsEventCalculatedIndicators(EarningsEventCalculatedIndicator entity)
		{
			this.SendPropertyChanging();
			entity.Stock = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EarningsEventCalculatedIndicators")]
	public partial class EarningsEventCalculatedIndicator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _EventDate;
		
		private int _StockID;
		
		private System.Nullable<byte> _Timing;
		
		private System.Nullable<System.DateTime> _VirtualReleaseDate;
		
		private System.Nullable<System.DateTime> _MarketDayAfterTheEvent;
		
		private System.Nullable<float> _EarningsEstimate;
		
		private System.Nullable<float> _EarningsActual;
		
		private System.Nullable<float> _RevenueEstimate;
		
		private System.Nullable<float> _RevenueActual;
		
		private System.Nullable<float> _Prev3MonthsVolumeAvg;
		
		private System.Nullable<float> _SHIR;
		
		private System.Nullable<float> _SHIRPercentileRanking;
		
		private System.Nullable<float> _PE;
		
		private System.Nullable<float> _PEPercentileRanking;
		
		private System.Nullable<float> _SMA7;
		
		private System.Nullable<float> _SMA7PercentileRanking;
		
		private System.Nullable<float> _SMA2;
		
		private System.Nullable<float> _SMA2PercentileRanking;
		
		private System.Nullable<float> _RSI;
		
		private System.Nullable<float> _RSIPercentileRanking;
		
		private System.Nullable<float> _LCPS;
		
		private System.Nullable<float> _LCPSPercentileRanking;
		
		private float _PrevClosePrice;
		
		private float _PostOpenPrice;
		
		private float _PostClosePrice;
		
		private float _PostHighPrice;
		
		private float _PostLowPrice;
		
		private float _SPYopenGap;
		
		private float _RelOpenGap;
		
		private System.Nullable<float> _EarningsActualPrevYear;
		
		private System.Nullable<float> _RevenueActualPrevYear;
		
		private System.Nullable<float> _NextDayOpenToClose;
		
		private System.Nullable<float> _CloseToNextDayClose;
		
		private System.Nullable<float> _VirtualReleaseDayOpenToClose;
		
		private float _OpenGap;
		
		private System.Nullable<float> _RevenuePerMC;
		
		private System.Nullable<float> _IncomePerMC;
		
		private System.Nullable<float> _CashPerMC;
		
		private System.Nullable<float> _DeptPerMC;
		
		private System.Nullable<float> _RevenuePerMCPercentileRanking;
		
		private System.Nullable<float> _IncomePerMCPercentileRanking;
		
		private System.Nullable<float> _CashPerMCPercentileRanking;
		
		private System.Nullable<float> _DeptPerMCPercentileRanking;
		
		private System.Nullable<float> _RevenuePerMCMainSectorRelative;
		
		private System.Nullable<float> _IncomePerMCMainSectorRelative;
		
		private System.Nullable<float> _CashPerMCMainSectorRelative;
		
		private System.Nullable<float> _DeptPerMCMainSectorRelative;
		
		private System.Nullable<float> _RevenuePerMCSubSectorRelative;
		
		private System.Nullable<float> _IncomePerMCSubSectorRelative;
		
		private System.Nullable<float> _CashPerMCSubSectorRelative;
		
		private System.Nullable<float> _DeptPerMCSubSectorRelative;
		
		private EntityRef<Stock> _Stock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEventDateChanging(System.DateTime value);
    partial void OnEventDateChanged();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnTimingChanging(System.Nullable<byte> value);
    partial void OnTimingChanged();
    partial void OnVirtualReleaseDateChanging(System.Nullable<System.DateTime> value);
    partial void OnVirtualReleaseDateChanged();
    partial void OnMarketDayAfterTheEventChanging(System.Nullable<System.DateTime> value);
    partial void OnMarketDayAfterTheEventChanged();
    partial void OnEarningsEstimateChanging(System.Nullable<float> value);
    partial void OnEarningsEstimateChanged();
    partial void OnEarningsActualChanging(System.Nullable<float> value);
    partial void OnEarningsActualChanged();
    partial void OnRevenueEstimateChanging(System.Nullable<float> value);
    partial void OnRevenueEstimateChanged();
    partial void OnRevenueActualChanging(System.Nullable<float> value);
    partial void OnRevenueActualChanged();
    partial void OnPrev3MonthsVolumeAvgChanging(System.Nullable<float> value);
    partial void OnPrev3MonthsVolumeAvgChanged();
    partial void OnSHIRChanging(System.Nullable<float> value);
    partial void OnSHIRChanged();
    partial void OnSHIRPercentileRankingChanging(System.Nullable<float> value);
    partial void OnSHIRPercentileRankingChanged();
    partial void OnPEChanging(System.Nullable<float> value);
    partial void OnPEChanged();
    partial void OnPEPercentileRankingChanging(System.Nullable<float> value);
    partial void OnPEPercentileRankingChanged();
    partial void OnSMA7Changing(System.Nullable<float> value);
    partial void OnSMA7Changed();
    partial void OnSMA7PercentileRankingChanging(System.Nullable<float> value);
    partial void OnSMA7PercentileRankingChanged();
    partial void OnSMA2Changing(System.Nullable<float> value);
    partial void OnSMA2Changed();
    partial void OnSMA2PercentileRankingChanging(System.Nullable<float> value);
    partial void OnSMA2PercentileRankingChanged();
    partial void OnRSIChanging(System.Nullable<float> value);
    partial void OnRSIChanged();
    partial void OnRSIPercentileRankingChanging(System.Nullable<float> value);
    partial void OnRSIPercentileRankingChanged();
    partial void OnLCPSChanging(System.Nullable<float> value);
    partial void OnLCPSChanged();
    partial void OnLCPSPercentileRankingChanging(System.Nullable<float> value);
    partial void OnLCPSPercentileRankingChanged();
    partial void OnPrevClosePriceChanging(float value);
    partial void OnPrevClosePriceChanged();
    partial void OnPostOpenPriceChanging(float value);
    partial void OnPostOpenPriceChanged();
    partial void OnPostClosePriceChanging(float value);
    partial void OnPostClosePriceChanged();
    partial void OnPostHighPriceChanging(float value);
    partial void OnPostHighPriceChanged();
    partial void OnPostLowPriceChanging(float value);
    partial void OnPostLowPriceChanged();
    partial void OnSPYopenGapChanging(float value);
    partial void OnSPYopenGapChanged();
    partial void OnRelOpenGapChanging(float value);
    partial void OnRelOpenGapChanged();
    partial void OnEarningsActualPrevYearChanging(System.Nullable<float> value);
    partial void OnEarningsActualPrevYearChanged();
    partial void OnRevenueActualPrevYearChanging(System.Nullable<float> value);
    partial void OnRevenueActualPrevYearChanged();
    partial void OnNextDayOpenToCloseChanging(System.Nullable<float> value);
    partial void OnNextDayOpenToCloseChanged();
    partial void OnCloseToNextDayCloseChanging(System.Nullable<float> value);
    partial void OnCloseToNextDayCloseChanged();
    partial void OnVirtualReleaseDayOpenToCloseChanging(System.Nullable<float> value);
    partial void OnVirtualReleaseDayOpenToCloseChanged();
    partial void OnOpenGapChanging(float value);
    partial void OnOpenGapChanged();
    partial void OnRevenuePerMCChanging(System.Nullable<float> value);
    partial void OnRevenuePerMCChanged();
    partial void OnIncomePerMCChanging(System.Nullable<float> value);
    partial void OnIncomePerMCChanged();
    partial void OnCashPerMCChanging(System.Nullable<float> value);
    partial void OnCashPerMCChanged();
    partial void OnDeptPerMCChanging(System.Nullable<float> value);
    partial void OnDeptPerMCChanged();
    partial void OnRevenuePerMCPercentileRankingChanging(System.Nullable<float> value);
    partial void OnRevenuePerMCPercentileRankingChanged();
    partial void OnIncomePerMCPercentileRankingChanging(System.Nullable<float> value);
    partial void OnIncomePerMCPercentileRankingChanged();
    partial void OnCashPerMCPercentileRankingChanging(System.Nullable<float> value);
    partial void OnCashPerMCPercentileRankingChanged();
    partial void OnDeptPerMCPercentileRankingChanging(System.Nullable<float> value);
    partial void OnDeptPerMCPercentileRankingChanged();
    partial void OnRevenuePerMCMainSectorRelativeChanging(System.Nullable<float> value);
    partial void OnRevenuePerMCMainSectorRelativeChanged();
    partial void OnIncomePerMCMainSectorRelativeChanging(System.Nullable<float> value);
    partial void OnIncomePerMCMainSectorRelativeChanged();
    partial void OnCashPerMCMainSectorRelativeChanging(System.Nullable<float> value);
    partial void OnCashPerMCMainSectorRelativeChanged();
    partial void OnDeptPerMCMainSectorRelativeChanging(System.Nullable<float> value);
    partial void OnDeptPerMCMainSectorRelativeChanged();
    partial void OnRevenuePerMCSubSectorRelativeChanging(System.Nullable<float> value);
    partial void OnRevenuePerMCSubSectorRelativeChanged();
    partial void OnIncomePerMCSubSectorRelativeChanging(System.Nullable<float> value);
    partial void OnIncomePerMCSubSectorRelativeChanged();
    partial void OnCashPerMCSubSectorRelativeChanging(System.Nullable<float> value);
    partial void OnCashPerMCSubSectorRelativeChanged();
    partial void OnDeptPerMCSubSectorRelativeChanging(System.Nullable<float> value);
    partial void OnDeptPerMCSubSectorRelativeChanged();
    #endregion
		
		public EarningsEventCalculatedIndicator()
		{
			this._Stock = default(EntityRef<Stock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventDate", DbType="Date NOT NULL", IsPrimaryKey=true)]
		public System.DateTime EventDate
		{
			get
			{
				return this._EventDate;
			}
			set
			{
				if ((this._EventDate != value))
				{
					this.OnEventDateChanging(value);
					this.SendPropertyChanging();
					this._EventDate = value;
					this.SendPropertyChanged("EventDate");
					this.OnEventDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timing", DbType="TinyInt")]
		public System.Nullable<byte> Timing
		{
			get
			{
				return this._Timing;
			}
			set
			{
				if ((this._Timing != value))
				{
					this.OnTimingChanging(value);
					this.SendPropertyChanging();
					this._Timing = value;
					this.SendPropertyChanged("Timing");
					this.OnTimingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VirtualReleaseDate", DbType="Date")]
		public System.Nullable<System.DateTime> VirtualReleaseDate
		{
			get
			{
				return this._VirtualReleaseDate;
			}
			set
			{
				if ((this._VirtualReleaseDate != value))
				{
					this.OnVirtualReleaseDateChanging(value);
					this.SendPropertyChanging();
					this._VirtualReleaseDate = value;
					this.SendPropertyChanged("VirtualReleaseDate");
					this.OnVirtualReleaseDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarketDayAfterTheEvent", DbType="Date")]
		public System.Nullable<System.DateTime> MarketDayAfterTheEvent
		{
			get
			{
				return this._MarketDayAfterTheEvent;
			}
			set
			{
				if ((this._MarketDayAfterTheEvent != value))
				{
					this.OnMarketDayAfterTheEventChanging(value);
					this.SendPropertyChanging();
					this._MarketDayAfterTheEvent = value;
					this.SendPropertyChanged("MarketDayAfterTheEvent");
					this.OnMarketDayAfterTheEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EarningsEstimate", DbType="Real")]
		public System.Nullable<float> EarningsEstimate
		{
			get
			{
				return this._EarningsEstimate;
			}
			set
			{
				if ((this._EarningsEstimate != value))
				{
					this.OnEarningsEstimateChanging(value);
					this.SendPropertyChanging();
					this._EarningsEstimate = value;
					this.SendPropertyChanged("EarningsEstimate");
					this.OnEarningsEstimateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EarningsActual", DbType="Real")]
		public System.Nullable<float> EarningsActual
		{
			get
			{
				return this._EarningsActual;
			}
			set
			{
				if ((this._EarningsActual != value))
				{
					this.OnEarningsActualChanging(value);
					this.SendPropertyChanging();
					this._EarningsActual = value;
					this.SendPropertyChanged("EarningsActual");
					this.OnEarningsActualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevenueEstimate", DbType="Real")]
		public System.Nullable<float> RevenueEstimate
		{
			get
			{
				return this._RevenueEstimate;
			}
			set
			{
				if ((this._RevenueEstimate != value))
				{
					this.OnRevenueEstimateChanging(value);
					this.SendPropertyChanging();
					this._RevenueEstimate = value;
					this.SendPropertyChanged("RevenueEstimate");
					this.OnRevenueEstimateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevenueActual", DbType="Real")]
		public System.Nullable<float> RevenueActual
		{
			get
			{
				return this._RevenueActual;
			}
			set
			{
				if ((this._RevenueActual != value))
				{
					this.OnRevenueActualChanging(value);
					this.SendPropertyChanging();
					this._RevenueActual = value;
					this.SendPropertyChanged("RevenueActual");
					this.OnRevenueActualChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prev3MonthsVolumeAvg", DbType="Real")]
		public System.Nullable<float> Prev3MonthsVolumeAvg
		{
			get
			{
				return this._Prev3MonthsVolumeAvg;
			}
			set
			{
				if ((this._Prev3MonthsVolumeAvg != value))
				{
					this.OnPrev3MonthsVolumeAvgChanging(value);
					this.SendPropertyChanging();
					this._Prev3MonthsVolumeAvg = value;
					this.SendPropertyChanged("Prev3MonthsVolumeAvg");
					this.OnPrev3MonthsVolumeAvgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SHIR", DbType="Real")]
		public System.Nullable<float> SHIR
		{
			get
			{
				return this._SHIR;
			}
			set
			{
				if ((this._SHIR != value))
				{
					this.OnSHIRChanging(value);
					this.SendPropertyChanging();
					this._SHIR = value;
					this.SendPropertyChanged("SHIR");
					this.OnSHIRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SHIRPercentileRanking", DbType="Real")]
		public System.Nullable<float> SHIRPercentileRanking
		{
			get
			{
				return this._SHIRPercentileRanking;
			}
			set
			{
				if ((this._SHIRPercentileRanking != value))
				{
					this.OnSHIRPercentileRankingChanging(value);
					this.SendPropertyChanging();
					this._SHIRPercentileRanking = value;
					this.SendPropertyChanged("SHIRPercentileRanking");
					this.OnSHIRPercentileRankingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PE", DbType="Real")]
		public System.Nullable<float> PE
		{
			get
			{
				return this._PE;
			}
			set
			{
				if ((this._PE != value))
				{
					this.OnPEChanging(value);
					this.SendPropertyChanging();
					this._PE = value;
					this.SendPropertyChanged("PE");
					this.OnPEChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PEPercentileRanking", DbType="Real")]
		public System.Nullable<float> PEPercentileRanking
		{
			get
			{
				return this._PEPercentileRanking;
			}
			set
			{
				if ((this._PEPercentileRanking != value))
				{
					this.OnPEPercentileRankingChanging(value);
					this.SendPropertyChanging();
					this._PEPercentileRanking = value;
					this.SendPropertyChanged("PEPercentileRanking");
					this.OnPEPercentileRankingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SMA7", DbType="Real")]
		public System.Nullable<float> SMA7
		{
			get
			{
				return this._SMA7;
			}
			set
			{
				if ((this._SMA7 != value))
				{
					this.OnSMA7Changing(value);
					this.SendPropertyChanging();
					this._SMA7 = value;
					this.SendPropertyChanged("SMA7");
					this.OnSMA7Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SMA7PercentileRanking", DbType="Real")]
		public System.Nullable<float> SMA7PercentileRanking
		{
			get
			{
				return this._SMA7PercentileRanking;
			}
			set
			{
				if ((this._SMA7PercentileRanking != value))
				{
					this.OnSMA7PercentileRankingChanging(value);
					this.SendPropertyChanging();
					this._SMA7PercentileRanking = value;
					this.SendPropertyChanged("SMA7PercentileRanking");
					this.OnSMA7PercentileRankingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SMA2", DbType="Real")]
		public System.Nullable<float> SMA2
		{
			get
			{
				return this._SMA2;
			}
			set
			{
				if ((this._SMA2 != value))
				{
					this.OnSMA2Changing(value);
					this.SendPropertyChanging();
					this._SMA2 = value;
					this.SendPropertyChanged("SMA2");
					this.OnSMA2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SMA2PercentileRanking", DbType="Real")]
		public System.Nullable<float> SMA2PercentileRanking
		{
			get
			{
				return this._SMA2PercentileRanking;
			}
			set
			{
				if ((this._SMA2PercentileRanking != value))
				{
					this.OnSMA2PercentileRankingChanging(value);
					this.SendPropertyChanging();
					this._SMA2PercentileRanking = value;
					this.SendPropertyChanged("SMA2PercentileRanking");
					this.OnSMA2PercentileRankingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RSI", DbType="Real")]
		public System.Nullable<float> RSI
		{
			get
			{
				return this._RSI;
			}
			set
			{
				if ((this._RSI != value))
				{
					this.OnRSIChanging(value);
					this.SendPropertyChanging();
					this._RSI = value;
					this.SendPropertyChanged("RSI");
					this.OnRSIChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RSIPercentileRanking", DbType="Real")]
		public System.Nullable<float> RSIPercentileRanking
		{
			get
			{
				return this._RSIPercentileRanking;
			}
			set
			{
				if ((this._RSIPercentileRanking != value))
				{
					this.OnRSIPercentileRankingChanging(value);
					this.SendPropertyChanging();
					this._RSIPercentileRanking = value;
					this.SendPropertyChanged("RSIPercentileRanking");
					this.OnRSIPercentileRankingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LCPS", DbType="Real")]
		public System.Nullable<float> LCPS
		{
			get
			{
				return this._LCPS;
			}
			set
			{
				if ((this._LCPS != value))
				{
					this.OnLCPSChanging(value);
					this.SendPropertyChanging();
					this._LCPS = value;
					this.SendPropertyChanged("LCPS");
					this.OnLCPSChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LCPSPercentileRanking", DbType="Real")]
		public System.Nullable<float> LCPSPercentileRanking
		{
			get
			{
				return this._LCPSPercentileRanking;
			}
			set
			{
				if ((this._LCPSPercentileRanking != value))
				{
					this.OnLCPSPercentileRankingChanging(value);
					this.SendPropertyChanging();
					this._LCPSPercentileRanking = value;
					this.SendPropertyChanged("LCPSPercentileRanking");
					this.OnLCPSPercentileRankingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrevClosePrice", DbType="Real NOT NULL")]
		public float PrevClosePrice
		{
			get
			{
				return this._PrevClosePrice;
			}
			set
			{
				if ((this._PrevClosePrice != value))
				{
					this.OnPrevClosePriceChanging(value);
					this.SendPropertyChanging();
					this._PrevClosePrice = value;
					this.SendPropertyChanged("PrevClosePrice");
					this.OnPrevClosePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostOpenPrice", DbType="Real NOT NULL")]
		public float PostOpenPrice
		{
			get
			{
				return this._PostOpenPrice;
			}
			set
			{
				if ((this._PostOpenPrice != value))
				{
					this.OnPostOpenPriceChanging(value);
					this.SendPropertyChanging();
					this._PostOpenPrice = value;
					this.SendPropertyChanged("PostOpenPrice");
					this.OnPostOpenPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostClosePrice", DbType="Real NOT NULL")]
		public float PostClosePrice
		{
			get
			{
				return this._PostClosePrice;
			}
			set
			{
				if ((this._PostClosePrice != value))
				{
					this.OnPostClosePriceChanging(value);
					this.SendPropertyChanging();
					this._PostClosePrice = value;
					this.SendPropertyChanged("PostClosePrice");
					this.OnPostClosePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostHighPrice", DbType="Real NOT NULL")]
		public float PostHighPrice
		{
			get
			{
				return this._PostHighPrice;
			}
			set
			{
				if ((this._PostHighPrice != value))
				{
					this.OnPostHighPriceChanging(value);
					this.SendPropertyChanging();
					this._PostHighPrice = value;
					this.SendPropertyChanged("PostHighPrice");
					this.OnPostHighPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostLowPrice", DbType="Real NOT NULL")]
		public float PostLowPrice
		{
			get
			{
				return this._PostLowPrice;
			}
			set
			{
				if ((this._PostLowPrice != value))
				{
					this.OnPostLowPriceChanging(value);
					this.SendPropertyChanging();
					this._PostLowPrice = value;
					this.SendPropertyChanged("PostLowPrice");
					this.OnPostLowPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SPYopenGap", DbType="Real NOT NULL")]
		public float SPYopenGap
		{
			get
			{
				return this._SPYopenGap;
			}
			set
			{
				if ((this._SPYopenGap != value))
				{
					this.OnSPYopenGapChanging(value);
					this.SendPropertyChanging();
					this._SPYopenGap = value;
					this.SendPropertyChanged("SPYopenGap");
					this.OnSPYopenGapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RelOpenGap", DbType="Real NOT NULL")]
		public float RelOpenGap
		{
			get
			{
				return this._RelOpenGap;
			}
			set
			{
				if ((this._RelOpenGap != value))
				{
					this.OnRelOpenGapChanging(value);
					this.SendPropertyChanging();
					this._RelOpenGap = value;
					this.SendPropertyChanged("RelOpenGap");
					this.OnRelOpenGapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EarningsActualPrevYear", DbType="Real")]
		public System.Nullable<float> EarningsActualPrevYear
		{
			get
			{
				return this._EarningsActualPrevYear;
			}
			set
			{
				if ((this._EarningsActualPrevYear != value))
				{
					this.OnEarningsActualPrevYearChanging(value);
					this.SendPropertyChanging();
					this._EarningsActualPrevYear = value;
					this.SendPropertyChanged("EarningsActualPrevYear");
					this.OnEarningsActualPrevYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevenueActualPrevYear", DbType="Real")]
		public System.Nullable<float> RevenueActualPrevYear
		{
			get
			{
				return this._RevenueActualPrevYear;
			}
			set
			{
				if ((this._RevenueActualPrevYear != value))
				{
					this.OnRevenueActualPrevYearChanging(value);
					this.SendPropertyChanging();
					this._RevenueActualPrevYear = value;
					this.SendPropertyChanged("RevenueActualPrevYear");
					this.OnRevenueActualPrevYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NextDayOpenToClose", DbType="Real")]
		public System.Nullable<float> NextDayOpenToClose
		{
			get
			{
				return this._NextDayOpenToClose;
			}
			set
			{
				if ((this._NextDayOpenToClose != value))
				{
					this.OnNextDayOpenToCloseChanging(value);
					this.SendPropertyChanging();
					this._NextDayOpenToClose = value;
					this.SendPropertyChanged("NextDayOpenToClose");
					this.OnNextDayOpenToCloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CloseToNextDayClose", DbType="Real")]
		public System.Nullable<float> CloseToNextDayClose
		{
			get
			{
				return this._CloseToNextDayClose;
			}
			set
			{
				if ((this._CloseToNextDayClose != value))
				{
					this.OnCloseToNextDayCloseChanging(value);
					this.SendPropertyChanging();
					this._CloseToNextDayClose = value;
					this.SendPropertyChanged("CloseToNextDayClose");
					this.OnCloseToNextDayCloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VirtualReleaseDayOpenToClose", DbType="Real")]
		public System.Nullable<float> VirtualReleaseDayOpenToClose
		{
			get
			{
				return this._VirtualReleaseDayOpenToClose;
			}
			set
			{
				if ((this._VirtualReleaseDayOpenToClose != value))
				{
					this.OnVirtualReleaseDayOpenToCloseChanging(value);
					this.SendPropertyChanging();
					this._VirtualReleaseDayOpenToClose = value;
					this.SendPropertyChanged("VirtualReleaseDayOpenToClose");
					this.OnVirtualReleaseDayOpenToCloseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenGap", AutoSync=AutoSync.Always, DbType="Real NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public float OpenGap
		{
			get
			{
				return this._OpenGap;
			}
			set
			{
				if ((this._OpenGap != value))
				{
					this.OnOpenGapChanging(value);
					this.SendPropertyChanging();
					this._OpenGap = value;
					this.SendPropertyChanged("OpenGap");
					this.OnOpenGapChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevenuePerMC", DbType="Real")]
		public System.Nullable<float> RevenuePerMC
		{
			get
			{
				return this._RevenuePerMC;
			}
			set
			{
				if ((this._RevenuePerMC != value))
				{
					this.OnRevenuePerMCChanging(value);
					this.SendPropertyChanging();
					this._RevenuePerMC = value;
					this.SendPropertyChanged("RevenuePerMC");
					this.OnRevenuePerMCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomePerMC", DbType="Real")]
		public System.Nullable<float> IncomePerMC
		{
			get
			{
				return this._IncomePerMC;
			}
			set
			{
				if ((this._IncomePerMC != value))
				{
					this.OnIncomePerMCChanging(value);
					this.SendPropertyChanging();
					this._IncomePerMC = value;
					this.SendPropertyChanged("IncomePerMC");
					this.OnIncomePerMCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashPerMC", DbType="Real")]
		public System.Nullable<float> CashPerMC
		{
			get
			{
				return this._CashPerMC;
			}
			set
			{
				if ((this._CashPerMC != value))
				{
					this.OnCashPerMCChanging(value);
					this.SendPropertyChanging();
					this._CashPerMC = value;
					this.SendPropertyChanged("CashPerMC");
					this.OnCashPerMCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptPerMC", DbType="Real")]
		public System.Nullable<float> DeptPerMC
		{
			get
			{
				return this._DeptPerMC;
			}
			set
			{
				if ((this._DeptPerMC != value))
				{
					this.OnDeptPerMCChanging(value);
					this.SendPropertyChanging();
					this._DeptPerMC = value;
					this.SendPropertyChanged("DeptPerMC");
					this.OnDeptPerMCChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevenuePerMCPercentileRanking", DbType="Real")]
		public System.Nullable<float> RevenuePerMCPercentileRanking
		{
			get
			{
				return this._RevenuePerMCPercentileRanking;
			}
			set
			{
				if ((this._RevenuePerMCPercentileRanking != value))
				{
					this.OnRevenuePerMCPercentileRankingChanging(value);
					this.SendPropertyChanging();
					this._RevenuePerMCPercentileRanking = value;
					this.SendPropertyChanged("RevenuePerMCPercentileRanking");
					this.OnRevenuePerMCPercentileRankingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomePerMCPercentileRanking", DbType="Real")]
		public System.Nullable<float> IncomePerMCPercentileRanking
		{
			get
			{
				return this._IncomePerMCPercentileRanking;
			}
			set
			{
				if ((this._IncomePerMCPercentileRanking != value))
				{
					this.OnIncomePerMCPercentileRankingChanging(value);
					this.SendPropertyChanging();
					this._IncomePerMCPercentileRanking = value;
					this.SendPropertyChanged("IncomePerMCPercentileRanking");
					this.OnIncomePerMCPercentileRankingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashPerMCPercentileRanking", DbType="Real")]
		public System.Nullable<float> CashPerMCPercentileRanking
		{
			get
			{
				return this._CashPerMCPercentileRanking;
			}
			set
			{
				if ((this._CashPerMCPercentileRanking != value))
				{
					this.OnCashPerMCPercentileRankingChanging(value);
					this.SendPropertyChanging();
					this._CashPerMCPercentileRanking = value;
					this.SendPropertyChanged("CashPerMCPercentileRanking");
					this.OnCashPerMCPercentileRankingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptPerMCPercentileRanking", DbType="Real")]
		public System.Nullable<float> DeptPerMCPercentileRanking
		{
			get
			{
				return this._DeptPerMCPercentileRanking;
			}
			set
			{
				if ((this._DeptPerMCPercentileRanking != value))
				{
					this.OnDeptPerMCPercentileRankingChanging(value);
					this.SendPropertyChanging();
					this._DeptPerMCPercentileRanking = value;
					this.SendPropertyChanged("DeptPerMCPercentileRanking");
					this.OnDeptPerMCPercentileRankingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevenuePerMCMainSectorRelative", DbType="Real")]
		public System.Nullable<float> RevenuePerMCMainSectorRelative
		{
			get
			{
				return this._RevenuePerMCMainSectorRelative;
			}
			set
			{
				if ((this._RevenuePerMCMainSectorRelative != value))
				{
					this.OnRevenuePerMCMainSectorRelativeChanging(value);
					this.SendPropertyChanging();
					this._RevenuePerMCMainSectorRelative = value;
					this.SendPropertyChanged("RevenuePerMCMainSectorRelative");
					this.OnRevenuePerMCMainSectorRelativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomePerMCMainSectorRelative", DbType="Real")]
		public System.Nullable<float> IncomePerMCMainSectorRelative
		{
			get
			{
				return this._IncomePerMCMainSectorRelative;
			}
			set
			{
				if ((this._IncomePerMCMainSectorRelative != value))
				{
					this.OnIncomePerMCMainSectorRelativeChanging(value);
					this.SendPropertyChanging();
					this._IncomePerMCMainSectorRelative = value;
					this.SendPropertyChanged("IncomePerMCMainSectorRelative");
					this.OnIncomePerMCMainSectorRelativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashPerMCMainSectorRelative", DbType="Real")]
		public System.Nullable<float> CashPerMCMainSectorRelative
		{
			get
			{
				return this._CashPerMCMainSectorRelative;
			}
			set
			{
				if ((this._CashPerMCMainSectorRelative != value))
				{
					this.OnCashPerMCMainSectorRelativeChanging(value);
					this.SendPropertyChanging();
					this._CashPerMCMainSectorRelative = value;
					this.SendPropertyChanged("CashPerMCMainSectorRelative");
					this.OnCashPerMCMainSectorRelativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptPerMCMainSectorRelative", DbType="Real")]
		public System.Nullable<float> DeptPerMCMainSectorRelative
		{
			get
			{
				return this._DeptPerMCMainSectorRelative;
			}
			set
			{
				if ((this._DeptPerMCMainSectorRelative != value))
				{
					this.OnDeptPerMCMainSectorRelativeChanging(value);
					this.SendPropertyChanging();
					this._DeptPerMCMainSectorRelative = value;
					this.SendPropertyChanged("DeptPerMCMainSectorRelative");
					this.OnDeptPerMCMainSectorRelativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RevenuePerMCSubSectorRelative", DbType="Real")]
		public System.Nullable<float> RevenuePerMCSubSectorRelative
		{
			get
			{
				return this._RevenuePerMCSubSectorRelative;
			}
			set
			{
				if ((this._RevenuePerMCSubSectorRelative != value))
				{
					this.OnRevenuePerMCSubSectorRelativeChanging(value);
					this.SendPropertyChanging();
					this._RevenuePerMCSubSectorRelative = value;
					this.SendPropertyChanged("RevenuePerMCSubSectorRelative");
					this.OnRevenuePerMCSubSectorRelativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomePerMCSubSectorRelative", DbType="Real")]
		public System.Nullable<float> IncomePerMCSubSectorRelative
		{
			get
			{
				return this._IncomePerMCSubSectorRelative;
			}
			set
			{
				if ((this._IncomePerMCSubSectorRelative != value))
				{
					this.OnIncomePerMCSubSectorRelativeChanging(value);
					this.SendPropertyChanging();
					this._IncomePerMCSubSectorRelative = value;
					this.SendPropertyChanged("IncomePerMCSubSectorRelative");
					this.OnIncomePerMCSubSectorRelativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CashPerMCSubSectorRelative", DbType="Real")]
		public System.Nullable<float> CashPerMCSubSectorRelative
		{
			get
			{
				return this._CashPerMCSubSectorRelative;
			}
			set
			{
				if ((this._CashPerMCSubSectorRelative != value))
				{
					this.OnCashPerMCSubSectorRelativeChanging(value);
					this.SendPropertyChanging();
					this._CashPerMCSubSectorRelative = value;
					this.SendPropertyChanged("CashPerMCSubSectorRelative");
					this.OnCashPerMCSubSectorRelativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptPerMCSubSectorRelative", DbType="Real")]
		public System.Nullable<float> DeptPerMCSubSectorRelative
		{
			get
			{
				return this._DeptPerMCSubSectorRelative;
			}
			set
			{
				if ((this._DeptPerMCSubSectorRelative != value))
				{
					this.OnDeptPerMCSubSectorRelativeChanging(value);
					this.SendPropertyChanging();
					this._DeptPerMCSubSectorRelative = value;
					this.SendPropertyChanged("DeptPerMCSubSectorRelative");
					this.OnDeptPerMCSubSectorRelativeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_EarningsEventCalculatedIndicator", Storage="_Stock", ThisKey="StockID", OtherKey="ID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.EarningsEventCalculatedIndicators.Remove(this);
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.EarningsEventCalculatedIndicators.Add(this);
						this._StockID = value.ID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ipo")]
	public partial class Ipo : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StockID;
		
		private string _LeadUnderwriters;
		
		private string _Underwriters;
		
		private System.DateTime _IPODate;
		
		private System.Nullable<System.DateTime> _QuietPeriodEndDate;
		
		private System.Nullable<System.DateTime> _LockupPeriodEndDate;
		
		private System.Nullable<float> _InitialFloat;
		
		private System.Nullable<float> _InitialRevenue;
		
		private EntityRef<Stock> _Stock;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStockIDChanging(int value);
    partial void OnStockIDChanged();
    partial void OnLeadUnderwritersChanging(string value);
    partial void OnLeadUnderwritersChanged();
    partial void OnUnderwritersChanging(string value);
    partial void OnUnderwritersChanged();
    partial void OnIPODateChanging(System.DateTime value);
    partial void OnIPODateChanged();
    partial void OnQuietPeriodEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnQuietPeriodEndDateChanged();
    partial void OnLockupPeriodEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLockupPeriodEndDateChanged();
    partial void OnInitialFloatChanging(System.Nullable<float> value);
    partial void OnInitialFloatChanged();
    partial void OnInitialRevenueChanging(System.Nullable<float> value);
    partial void OnInitialRevenueChanged();
    #endregion
		
		public Ipo()
		{
			this._Stock = default(EntityRef<Stock>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StockID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StockID
		{
			get
			{
				return this._StockID;
			}
			set
			{
				if ((this._StockID != value))
				{
					if (this._Stock.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStockIDChanging(value);
					this.SendPropertyChanging();
					this._StockID = value;
					this.SendPropertyChanged("StockID");
					this.OnStockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeadUnderwriters", DbType="VarChar(128)")]
		public string LeadUnderwriters
		{
			get
			{
				return this._LeadUnderwriters;
			}
			set
			{
				if ((this._LeadUnderwriters != value))
				{
					this.OnLeadUnderwritersChanging(value);
					this.SendPropertyChanging();
					this._LeadUnderwriters = value;
					this.SendPropertyChanged("LeadUnderwriters");
					this.OnLeadUnderwritersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Underwriters", DbType="VarChar(128)")]
		public string Underwriters
		{
			get
			{
				return this._Underwriters;
			}
			set
			{
				if ((this._Underwriters != value))
				{
					this.OnUnderwritersChanging(value);
					this.SendPropertyChanging();
					this._Underwriters = value;
					this.SendPropertyChanged("Underwriters");
					this.OnUnderwritersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPODate", DbType="Date NOT NULL")]
		public System.DateTime IPODate
		{
			get
			{
				return this._IPODate;
			}
			set
			{
				if ((this._IPODate != value))
				{
					this.OnIPODateChanging(value);
					this.SendPropertyChanging();
					this._IPODate = value;
					this.SendPropertyChanged("IPODate");
					this.OnIPODateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuietPeriodEndDate", DbType="Date")]
		public System.Nullable<System.DateTime> QuietPeriodEndDate
		{
			get
			{
				return this._QuietPeriodEndDate;
			}
			set
			{
				if ((this._QuietPeriodEndDate != value))
				{
					this.OnQuietPeriodEndDateChanging(value);
					this.SendPropertyChanging();
					this._QuietPeriodEndDate = value;
					this.SendPropertyChanged("QuietPeriodEndDate");
					this.OnQuietPeriodEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockupPeriodEndDate", DbType="Date")]
		public System.Nullable<System.DateTime> LockupPeriodEndDate
		{
			get
			{
				return this._LockupPeriodEndDate;
			}
			set
			{
				if ((this._LockupPeriodEndDate != value))
				{
					this.OnLockupPeriodEndDateChanging(value);
					this.SendPropertyChanging();
					this._LockupPeriodEndDate = value;
					this.SendPropertyChanged("LockupPeriodEndDate");
					this.OnLockupPeriodEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialFloat", DbType="Real")]
		public System.Nullable<float> InitialFloat
		{
			get
			{
				return this._InitialFloat;
			}
			set
			{
				if ((this._InitialFloat != value))
				{
					this.OnInitialFloatChanging(value);
					this.SendPropertyChanging();
					this._InitialFloat = value;
					this.SendPropertyChanged("InitialFloat");
					this.OnInitialFloatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InitialRevenue", DbType="Real")]
		public System.Nullable<float> InitialRevenue
		{
			get
			{
				return this._InitialRevenue;
			}
			set
			{
				if ((this._InitialRevenue != value))
				{
					this.OnInitialRevenueChanging(value);
					this.SendPropertyChanging();
					this._InitialRevenue = value;
					this.SendPropertyChanged("InitialRevenue");
					this.OnInitialRevenueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stock_Ipo", Storage="_Stock", ThisKey="StockID", OtherKey="ID", IsForeignKey=true)]
		public Stock Stock
		{
			get
			{
				return this._Stock.Entity;
			}
			set
			{
				Stock previousValue = this._Stock.Entity;
				if (((previousValue != value) 
							|| (this._Stock.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stock.Entity = null;
						previousValue.Ipo = null;
					}
					this._Stock.Entity = value;
					if ((value != null))
					{
						value.Ipo = this;
						this._StockID = value.ID;
					}
					else
					{
						this._StockID = default(int);
					}
					this.SendPropertyChanged("Stock");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IpoUnderwriter")]
	public partial class IpoUnderwriter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public IpoUnderwriter()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(128)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
